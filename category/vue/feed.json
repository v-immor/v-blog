{
    "version": "https://jsonfeed.org/version/1",
    "title": "开发随笔 • All posts by \"vue\" category",
    "description": "~虚拟建设者~",
    "home_page_url": "https://v-immor.github.io/v-blog",
    "items": [
        {
            "id": "https://v-immor.github.io/v-blog/2021/12/29/javascripts/vue/vue-router/",
            "url": "https://v-immor.github.io/v-blog/2021/12/29/javascripts/vue/vue-router/",
            "title": "Vue Router 食用指南",
            "date_published": "2021-12-29T14:16:00.000Z",
            "content_html": "<h3 id=\"1-起步\"><a class=\"markdownIt-Anchor\" href=\"#1-起步\">#</a> 1. 起步</h3>\n<ol>\n<li>使用模块化，要调用 Vue.use (VueRouter)</li>\n<li>注入路由器，任何组件都可通过 this.<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mtext>访问路由器，</mtext><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">router 访问路由器，this.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord cjk_fallback\">访</span><span class=\"mord cjk_fallback\">问</span><span class=\"mord cjk_fallback\">路</span><span class=\"mord cjk_fallback\">由</span><span class=\"mord cjk_fallback\">器</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mord\">.</span></span></span></span>route 访问当前路由</li>\n</ol>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.nlark.com/yuque/0/2020/png/448234/1586942111407-979d831d-2d0a-4e1c-9b20-1688f38fd04f.png#align=left&amp;display=inline&amp;height=408&amp;name=1586929561190.png&amp;originHeight=408&amp;originWidth=696&amp;size=44854&amp;status=done&amp;style=none&amp;width=696\" alt=\"1586929561190.png\"></p>\n<h3 id=\"2-动态路由匹配\"><a class=\"markdownIt-Anchor\" href=\"#2-动态路由匹配\">#</a> 2. 动态路由匹配</h3>\n<ol>\n<li>路径参数使用 ：冒号标记，当匹配到一个路由，参数会被设置到 this.$route.params</li>\n</ol>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.nlark.com/yuque/0/2020/png/448234/1586942187698-19783596-ccd7-42a3-b582-ad71add0b83b.png#align=left&amp;display=inline&amp;height=169&amp;name=1586930691665.png&amp;originHeight=169&amp;originWidth=297&amp;size=10752&amp;status=done&amp;style=none&amp;width=297\" alt=\"1586930691665.png\"></p>\n<ol start=\"2\">\n<li>动态路由的参数改变（id 改变）, 例如从 /user/111 到 /user/222 ，原来的组件会被复用，意味着组件的生命周期钩子函数不会重复调用，如想复用，可用以下方法</li>\n</ol>\n<ul>\n<li>用 watch 监测变化</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">watch</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token string\">'$route'</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span>from<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>使用 2.2 的 beforeRouteUpdate 导航守卫</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">beforeRouteUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>捕获所有路由或 404 Not found 路由</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 匹配所有路径，放在最后</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/user-*'</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 匹配 '/user-' 开头的任意路径，放在后面</span></pre></td></tr></table></figure><h3 id=\"3-嵌套路由\"><a class=\"markdownIt-Anchor\" href=\"#3-嵌套路由\">#</a> 3. 嵌套路由</h3>\n<ol>\n<li>父组件包含自己的嵌套 <router-view />, VueRouter 的参数使用 children 配置</li>\n</ol>\n<h3 id=\"4-编程式的导航\"><a class=\"markdownIt-Anchor\" href=\"#4-编程式的导航\">#</a> 4. 编程式的导航</h3>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.nlark.com/yuque/0/2020/png/448234/1586942936614-865b790d-d9cb-4acf-b511-0e08b03f3e5a.png#align=left&amp;display=inline&amp;height=97&amp;name=1586935811809.png&amp;originHeight=97&amp;originWidth=407&amp;size=4006&amp;status=done&amp;style=none&amp;width=407\" alt=\"1586935811809.png\"></p>\n<ol>\n<li>使用 router.push () ，这个方法会向 history 栈添加一个新的记录，所以当用户点击回退按钮，会回到之前的 URL。</li>\n<li>router.go (n) n 为整数，意思是在 history 记录中前进或后退几步，类似 window.history.go (n)</li>\n</ol>\n<blockquote>\n<p><code>router.push</code> 、  <code>router.replace</code>  和  <code>router.go</code>  跟 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History\"> <code>window.history.pushState</code> 、  <code>window.history.replaceState</code>  和  <code>window.history.go</code> </a> 好像， 实际上它们确实是效仿  <code>window.history</code>  API 的。</p>\n</blockquote>\n<h3 id=\"5-命名路由\"><a class=\"markdownIt-Anchor\" href=\"#5-命名路由\">#</a> 5. 命名路由</h3>\n<p>在 routes 配置中给路由设置名称</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">routes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/user/:userId'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> User</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"6-命名视图\"><a class=\"markdownIt-Anchor\" href=\"#6-命名视图\">#</a> 6. 命名视图</h3>\n<p>用于同级展示多个视图，并非嵌套展示，如侧导航 + 主内容的布局</p>\n<h3 id=\"7-重定向和别名\"><a class=\"markdownIt-Anchor\" href=\"#7-重定向和别名\">#</a> 7. 重定向和别名</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 重定向</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/a'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">redirect</span><span class=\"token operator\">:</span> <span class=\"token string\">'/b'</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 别名</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/a'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">alias</span><span class=\"token operator\">:</span> <span class=\"token string\">'/b'</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"8-导航守卫\"><a class=\"markdownIt-Anchor\" href=\"#8-导航守卫\">#</a> 8. 导航守卫</h3>\n<p>用来通过跳转或取消的方式守卫导航，有多种机会植入路由的导航过程中：全局、单个路由独享、组件级。<br>\n注意：参数或查询的改变不会触发进入 / 离开的导航守卫</p>\n<ul>\n<li>router.beforeEach (to,from,next) 全局前置守卫：在导航被确认之前会进行全局拦截，常用于判断用户是否登录</li>\n<li>router.beforeResolve (to,from,next) 全局解析守卫：在导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后</li>\n<li>afterEach (to,from) 全局后置钩子：这些钩子不会接受 next 函数也不会改变导航本身</li>\n<li>beforeEnter 路由独享守卫：在路由配置上定义</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/foo'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> Foo<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function-variable function\">beforeEnter</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>组件内守卫 beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave</li>\n</ul>\n<p>參考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC81OWMwMDU1MTFkNzM=\">https://www.jianshu.com/p/59c005511d73</span></p>\n<h3 id=\"9-路由元信息meta\"><a class=\"markdownIt-Anchor\" href=\"#9-路由元信息meta\">#</a> 9. 路由元信息（meta）</h3>\n<p>可通过 this.$route 拿到</p>\n<h3 id=\"10-过渡动效\"><a class=\"markdownIt-Anchor\" href=\"#10-过渡动效\">#</a> 10. 过渡动效</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 给所有路由设置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>transition<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token operator\">&lt;</span>router<span class=\"token operator\">-</span>view<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>router<span class=\"token operator\">-</span>view<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>transition<span class=\"token operator\">></span></pre></td></tr></table></figure><p>如果需要每个路由组件有各自的过渡效果，可在各组件内使用 <transition></p>\n<h3 id=\"11-数据获取\"><a class=\"markdownIt-Anchor\" href=\"#11-数据获取\">#</a> 11. 数据获取</h3>\n<ol>\n<li><strong>导航完成之后获取</strong>：先完成导航，后在接下来的组件生命周期钩子中获取数据。在数据获取期间显示 “加载中” 之类的指示。</li>\n<li><strong>导航完成之前获取</strong>：导航完成前，在路由进入的守卫中获取数据，在数据获取成功后执行导航。</li>\n</ol>\n<h3 id=\"12-滚动行为\"><a class=\"markdownIt-Anchor\" href=\"#12-滚动行为\">#</a> 12. 滚动行为</h3>\n<p>创建路由实例时，可提供一个 scrollBehavior (to, from, savedPosition) 方法， savedPosition 仅当 popstate 导     航（浏览器前进 / 后退）时触发。<br>\n注意：滚动行为只在支持 history.pushState 的浏览器中可用</p>\n<h3 id=\"13-路由懒加载\"><a class=\"markdownIt-Anchor\" href=\"#13-路由懒加载\">#</a> 13. 路由懒加载</h3>\n<p>Webpack 2 ，可以使用动态 import 语法来定义代码分块点，如果使用 Babel，需要添加 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWJlbGpzLmlvL2RvY3MvZW4vYmFiZWwtcGx1Z2luLXN5bnRheC1keW5hbWljLWltcG9ydC8=\">plugin-syntax-dynamic-import</span>  插件</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/foo'</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./Foo.vue'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "原理",
                "Vue"
            ]
        }
    ]
}