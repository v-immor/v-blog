{
    "version": "https://jsonfeed.org/version/1",
    "title": "开发随笔 • All posts by \"开发实践\" category",
    "description": "~虚拟建设者~",
    "home_page_url": "https://v-immor.github.io/v-blog",
    "items": [
        {
            "id": "https://v-immor.github.io/v-blog/2022/06/01/javascripts/react/develop/React%E5%85%A8%E5%B1%80%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86Redux/",
            "url": "https://v-immor.github.io/v-blog/2022/06/01/javascripts/react/develop/React%E5%85%A8%E5%B1%80%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86Redux/",
            "title": "React全局状态管理 - Redux",
            "date_published": "2022-06-01T11:12:00.000Z",
            "content_html": "<h1 id=\"redux组成\"><a class=\"markdownIt-Anchor\" href=\"#redux组成\">#</a> Redux 组成</h1>\n<ol>\n<li>redux 由 action、reducer、store 三个部分组成<br>\n<img data-src=\"https://images.weserv.nl/?url=https://cdn.nlark.com/yuque/0/2019/png/412560/1575014804335-fb1bce0e-4b5f-4d54-9c28-dfa70aaef82a.png\" alt=\"\"></li>\n<li>redux 工作流程</li>\n</ol>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.nlark.com/yuque/0/2019/webp/412560/1575014603014-685c44b6-483f-4e93-ae3a-13dabba7de01.webp#align=left&amp;display=inline&amp;height=368&amp;originHeight=368&amp;originWidth=1240&amp;size=0&amp;status=done&amp;style=none&amp;width=1240\" alt=\"\"></p>\n<ol start=\"3\">\n<li>redux 分发理解</li>\n</ol>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.nlark.com/yuque/0/2019/gif/412560/1575014755198-d0be1ffb-ae30-40c7-af49-b359ea99dd2f.gif#align=left&amp;display=inline&amp;height=475&amp;originHeight=475&amp;originWidth=700&amp;size=0&amp;status=done&amp;style=none&amp;width=700\" alt=\"\"></p>\n<h2 id=\"action\"><a class=\"markdownIt-Anchor\" href=\"#action\">#</a> action</h2>\n<p>是把数据从应用传到 store 的有效载荷。它是 store 数据的唯一来源。一般来说，就是通过 store.dispatch () 将 action 传到 store。<br>\naction 本质上是 JavaScript 普通对象。我们约定，action 内使用一个字符串类型的 type 字段来表示将要执行的动作。多数情况下，type 会被定义成字符串常量。当应用规模越来越大时，建议使用单独的模块或文件来存放 action。<br>\naction:{type:‘TODO’,payload:{name:‘lisi’}}</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//action 类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">ADD_TODO</span> <span class=\"token operator\">=</span> <span class=\"token string\">'ADD_TODO'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 通过 dispatch 将 action 递交到 reducer 中处理</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">ADD_TODO</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token literal-property property\">payload</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'lisi'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在具体使用过程中，通常会使用一个函数来生成相应的 action 对象，使得代码更容易测试和移植</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 生成 action</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">addTodo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">ADD_TODO</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    text</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 通过 dispatch 将 action 递交到 reducer 中处理</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">addTodo</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"reducer\"><a class=\"markdownIt-Anchor\" href=\"#reducer\">#</a> reducer</h2>\n<p>action 只是描述了有事情发生了这一事实，并没有指明应用如何更新 state。那么该如何去更新 state 或执行其他动作，这就是 reducer 需要关注的事情了。<br>\n通常一个 reducer 里存在一个 switch，根据 action 类型来执行不同的 state 更新操作，同时包涵一个 initState, 用来初始化当前 reducer 中的 state，其中返回的对象将会覆盖整个 state 对象，如果不希望变动其他对象，则需要对之前的 state 进行扩展赋值，只将更新的 state 进行覆盖<br>\n reducer (preSttate,action)</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token constant\">QUERY</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SUBMIT</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../actions/homeActions\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 初始 state</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> initState <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//reducer 函数 reducer (preSttate,action)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">home</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initState<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> type<span class=\"token punctuation\">,</span> payload <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token constant\">QUERY</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>payload <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token constant\">SUBMIT</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>payload <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> home<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"store\"><a class=\"markdownIt-Anchor\" href=\"#store\">#</a> store</h2>\n<p>使用 action 来描述 “发生了什么”、使用 reducer 来根据 action 更新 state ，那么 store 就是负责将它们联系到一起的对象。<br>\nstore 的职责：</p>\n<ul>\n<li>维持应用的 state；</li>\n<li>提供 getState () 方法获取 state；</li>\n<li>提供 dispatch (action) 方法更新 state；</li>\n<li>通过 subscribe (listener) 注册监听器。</li>\n</ul>\n<p><strong>Redux 应用只有一个单一的 store！Redux 应用只有一个单一的 store</strong>！<strong>Redux 应用只有一个单一的 store！</strong><br>\n当需要拆分处理数据的逻辑时，使用 reducer 组合（combineReducers ()） 而不是创建多个 store。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 多个 reducers 处理后的结果</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> reducers <span class=\"token keyword\">from</span> <span class=\"token string\">\"../reducers\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//store 通过 createStore 获取，Redux 应用只有一个单一的 store！</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> store<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>综上，一个完整的 redux 应当包含 actions、reducers、store 三个部分。</p>\n<h1 id=\"将redux使用在react应用中\"><a class=\"markdownIt-Anchor\" href=\"#将redux使用在react应用中\">#</a> 将 Redux 使用在 React 应用中</h1>\n<h2 id=\"将store挂载到dom中\"><a class=\"markdownIt-Anchor\" href=\"#将store挂载到dom中\">#</a> 将 store 挂载到 dom 中</h2>\n<p>使用 Provider 组件即可让整个 dom 树中的节点都能够通过 connect 去访问 store 的内容</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"./global.less\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Route\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 引入 Provider</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Provider <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-redux\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> store <span class=\"token keyword\">from</span> <span class=\"token string\">\"./redux/store\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token operator\">&lt;</span>Provider store<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>store<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"通过connect去访问store\"><a class=\"markdownIt-Anchor\" href=\"#通过connect去访问store\">#</a> 通过 connect 去访问 store</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> Component <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> connect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-redux\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 如需使用装饰器模式配置 @babel/plugin-proposal-decorators</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>@<span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> home <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> home <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseLayout</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 可使用 dispatch 去更新 store</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;children,dispatch,home&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> children <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>children<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> BaseLayout<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"通过dispatch去更新store\"><a class=\"markdownIt-Anchor\" href=\"#通过dispatch去更新store\">#</a> 通过 dispatch 去更新 store</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// BaseLayout.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> Component <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> connect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-redux\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> updateStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../redux/actions/homeActions\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>@<span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> home <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> home <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseLayout</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> children<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">,</span> home <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token operator\">&lt;</span>button</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      \t\t<span class=\"token comment\">// 按钮点击后将会把 home 的 state 更为 &#123;name:' 张三 '&#125;，updateStore 为生成 action 的函数</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">updateStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"张三\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          更新store</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>home<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>children<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> BaseLayout<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// homeActions.js (action)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">QUERY</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"QUERY\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">SUBMIT</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"SUBMIT\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">updateStore</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">payload</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">QUERY</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    payload</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">// home.js (reducer)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token constant\">QUERY</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SUBMIT</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../actions/homeActions\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">const</span> initState <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">home</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initState<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> type<span class=\"token punctuation\">,</span> payload <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token constant\">QUERY</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>payload <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token constant\">SUBMIT</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>payload <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> home<span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://v-immor.github.io/v-blog/2022/03/07/javascripts/react/develop/%E5%A6%82%E4%BD%95%E6%BB%A1%E8%B6%B3React%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%EF%BC%9F/",
            "url": "https://v-immor.github.io/v-blog/2022/03/07/javascripts/react/develop/%E5%A6%82%E4%BD%95%E6%BB%A1%E8%B6%B3React%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%EF%BC%9F/",
            "title": "如何满足 React 组件开发的最佳实践？",
            "date_published": "2022-03-07T14:32:00.000Z",
            "content_html": "<blockquote>\n<p>本篇主要内容</p>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\"><label for=\"cbx_0\"> 怎样的才能称为最佳实践</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\"><label for=\"cbx_1\"> 如何拆分组件</label></li>\n</ul>\n</blockquote>\n<h2 id=\"什么是-react\"><a class=\"markdownIt-Anchor\" href=\"#什么是-react\">#</a> 什么是 React？</h2>\n<blockquote>\n<p>React 是一个用于构建用户界面的声明式的 JavaScript 库。<br>\n组件化：构建管理自身状态的封装组件，然后对其组合以构成复杂的 UI。</p>\n</blockquote>\n<h2 id=\"react-组件化的哲学\"><a class=\"markdownIt-Anchor\" href=\"#react-组件化的哲学\">#</a> React 组件化的哲学</h2>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC1oYW5zLnJlYWN0anMub3JnL2RvY3MvdGhpbmtpbmctaW4tcmVhY3QuaHRtbA==\">https://zh-hans.reactjs.org/docs/thinking-in-react.html</span><br>\n 满足 React 组件化哲学的实现就可以称之为 “最佳实践” 了。</p>\n</blockquote>\n<p>从拿到设计稿开始，我们大致需要 5 步就可以构建出我们的应用了。</p>\n<h3 id=\"第一步将设计好的-ui-划分为组件层级\"><a class=\"markdownIt-Anchor\" href=\"#第一步将设计好的-ui-划分为组件层级\">#</a> <strong>第一步：将设计好的 UI 划分为组件层级</strong></h3>\n<p><strong>将组件当作一种函数或者是对象来考虑，根据单一功能原则来判定组件的范围。</strong><br>\n<strong>举个例子：</strong><br>\n<img data-src=\"https://images.weserv.nl/?url=https://cdn.nlark.com/yuque/0/2022/png/412560/1649513238571-f6e7c569-2807-405f-b044-95bd075fe4d4.png#averageHue=%23cfd3a0&amp;clientId=u4af3e3d1-f3b2-4&amp;from=paste&amp;height=915&amp;id=ubc84a2f1&amp;name=image.png&amp;originHeight=1830&amp;originWidth=870&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=240165&amp;status=done&amp;style=none&amp;taskId=u85c38b9e-de84-4c20-8e06-5a04c0de072&amp;title=&amp;width=435\" alt=\"image.png\"><br>\n<strong> 如何控制细粒度？</strong></p>\n<ul>\n<li>是否存在交互？交互影响的范围？</li>\n<li>是否存在共性？</li>\n</ul>\n<blockquote>\n<ol>\n<li>静态视图，大部分情况可以不抽成组件</li>\n<li>纯展示类可以抽离成纯组件，视图的变更交给 props</li>\n<li>存在复杂交互、或状态变更频繁的，可以抽离成组件。</li>\n<li>在以上三点考虑完之后，根据业务的复杂度可以考虑复合组件</li>\n</ol>\n</blockquote>\n<p>按我个人的理解，按照用途可以将组件级别大致分为三类。以 antd 举例</p>\n<ol>\n<li>基础组件\n<ol>\n<li>提供基础的外观以及可以一定程度的自定义外观</li>\n<li>拥有基础的事件</li>\n<li>是可以接受完全控制的</li>\n</ol>\n</li>\n</ol>\n<p>例：Button、Input、Textarea、Radio、CheckBox、Message、Layout…</p>\n<ol start=\"2\">\n<li>复合组件\n<ol>\n<li>由多个基础组件复合而成</li>\n<li>具有多个事件控制</li>\n<li>能够接受一定程度自定义</li>\n</ol>\n</li>\n</ol>\n<p>例：Modal、TreeSelect、AutoComplete、Menu、Upload</p>\n<ol start=\"3\">\n<li>业务组件\n<ol>\n<li>与具体业务流程强耦合，或拥有独立的业务。</li>\n<li>能够接受一定程度外观自定义。</li>\n</ol>\n</li>\n</ol>\n<p>例：用户选择器、企业选择器…</p>\n<h3 id=\"第二步用-react-创建一个静态版本\"><a class=\"markdownIt-Anchor\" href=\"#第二步用-react-创建一个静态版本\">#</a> <strong>第二步：用 React 创建一个静态版本</strong></h3>\n<p>如果不是非常明确状态的流动、那么就把状态先丢掉，先实现组件的外观。然后再根据业务的需求来判断数据的流动轨迹。</p>\n<h3 id=\"第三步确定-ui-state-的最小且完整表示\"><a class=\"markdownIt-Anchor\" href=\"#第三步确定-ui-state-的最小且完整表示\">#</a> <strong>第三步：确定 UI state 的最小（且完整）表示</strong></h3>\n<p><strong>如何确定组件的 state？先给自己一个致命三连。</strong></p>\n<ol>\n<li><strong>该数据是否是由父组件通过 props 传递而来的？如果是，那它应该不是 state。</strong></li>\n<li><strong>该数据是否随时间的推移而保持不变？如果是，那它应该也不是 state。</strong></li>\n<li><strong>你能否根据其他 state 或 props 计算出该数据的值？如果是，那它也不是 state。</strong></li>\n</ol>\n<h3 id=\"第四步确定-state-放置的位置\"><a class=\"markdownIt-Anchor\" href=\"#第四步确定-state-放置的位置\">#</a> <strong>第四步：确定 state 放置的位置</strong></h3>\n<p>我们已经确定了应用所需的 state 的最小集合。接下来，我们需要确定哪个组件能够改变这些 state，或者说拥有这些 state。</p>\n<p><strong>注意：React 中的数据流是单向的，并顺着组件层级从上往下传递。哪个组件应该拥有某个 state 这件事，对初学者来说往往是最难理解的部分。尽管这可能在一开始不是那么清晰，但你可以尝试通过以下步骤来判断：</strong></p>\n<p><strong>对于应用中的每一个 state：</strong></p>\n<ol>\n<li><strong>找到根据这个 state 进行渲染的所有组件。</strong></li>\n<li><strong>找到他们的共同所有者（common owner）组件（在组件层级上高于所有需要该 state 的组件）。</strong></li>\n<li><strong>该共同所有者组件或者比它层级更高的组件应该拥有该 state。</strong></li>\n<li><strong>如果你找不到一个合适的位置来存放该 state，就可以直接创建一个新的组件来存放该 state，并将这一新组件置于高于共同所有者组件层级的位置。</strong></li>\n</ol>\n<h3 id=\"第五步添加反向数据流\"><a class=\"markdownIt-Anchor\" href=\"#第五步添加反向数据流\">#</a> <strong>第五步：添加反向数据流</strong></h3>\n<blockquote>\n<p>React 通过一种比传统的双向绑定略微繁琐的方法来实现反向数据传递。</p>\n</blockquote>\n<p>即如果组件接受 props 的控制，且需要在组件内部去控制 props ，则必须在 props 中传入控制的函数，而不能直接修改 props，或者通过内部 state 拦截 props 导致状态不一致。</p>\n<p>这是 Vue 或者响应式框架诟病 React 的地方，相对于响应式的直接，这种反向数据流显得不是那么的优雅。尽管如此，这种需要显式声明的方法明前更有助于人们理解程序的运作方式。</p>\n<p>满足 React 哲学原则的组件设计可以认为是 “最佳实践”。同时也能满足最基本的 “如何拆分组件” 需求。</p>\n",
            "tags": []
        }
    ]
}