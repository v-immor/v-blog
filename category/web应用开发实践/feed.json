{
    "version": "https://jsonfeed.org/version/1",
    "title": "开发随笔 • All posts by \"web应用开发实践\" category",
    "description": "普通的开发随笔，普通的博客，我不是普通~",
    "home_page_url": "https://v-immor.github.io/v-blog",
    "items": [
        {
            "id": "https://v-immor.github.io/v-blog/2021/02/11/web-develop/%E9%98%B2%E6%8A%96%E3%80%81%E8%8A%82%E6%B5%81%E4%B8%8E%E5%9B%9E%E6%B5%81%E3%80%81%E9%87%8D%E7%BB%98/",
            "url": "https://v-immor.github.io/v-blog/2021/02/11/web-develop/%E9%98%B2%E6%8A%96%E3%80%81%E8%8A%82%E6%B5%81%E4%B8%8E%E5%9B%9E%E6%B5%81%E3%80%81%E9%87%8D%E7%BB%98/",
            "title": "防抖、节流与回流、重绘",
            "date_published": "2021-02-11T20:34:00.000Z",
            "content_html": "<h2 id=\"防抖任务频繁触发的情况下只有任务触发的间隔超过指定间隔的时候任务才会执行\"><a class=\"markdownIt-Anchor\" href=\"#防抖任务频繁触发的情况下只有任务触发的间隔超过指定间隔的时候任务才会执行\">#</a> 防抖：任务频繁触发的情况下，只有任务触发的间隔超过指定间隔的时候，任务才会执行。</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 防抖函数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @author vision</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param &#123;执行函数&#125; fn</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @param &#123;延迟&#125; delay</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">let</span> timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">let</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">let</span> arg <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> * 防抖函数 - 箭头函数</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> * @param &#123;执行函数&#125; fn</pre></td></tr><tr><td data-num=\"22\"></td><td><pre> * @param &#123;延迟&#125; delay</pre></td></tr><tr><td data-num=\"23\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">debounceEs6</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">let</span> timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>rest</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"节流指定时间间隔内只会执行一次任务\"><a class=\"markdownIt-Anchor\" href=\"#节流指定时间间隔内只会执行一次任务\">#</a> 节流：指定时间间隔内只会执行一次任务。</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token comment\">// 通过闭包保存一个标记</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">let</span> canRun <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 在函数开头判断标志是否为 true，不为 true 则中断函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>canRun<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 将 canRun 设置为 false，防止执行之前再被执行</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        canRun <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 定时器</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          <span class=\"token comment\">// 执行完事件（比如调用完接口）之后，重新将这个标志设置为 true</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          canRun <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"重绘repaint当元素样式的改变不影响布局时浏览器将使用重绘对元素进行更新此时由于只需要-ui-层面的重新像素绘制因此损耗较少\"><a class=\"markdownIt-Anchor\" href=\"#重绘repaint当元素样式的改变不影响布局时浏览器将使用重绘对元素进行更新此时由于只需要-ui-层面的重新像素绘制因此损耗较少\">#</a> 重绘 (repaint)：当元素样式的改变不影响布局时，浏览器将使用重绘对元素进行更新，此时由于只需要 UI 层面的重新像素绘制，因此损耗较少。</h2>\n<blockquote>\n<p>常见的重绘操作有：</p>\n<ul>\n<li>改变元素颜色改变</li>\n<li>元素背景色</li>\n<li>more ……</li>\n</ul>\n</blockquote>\n<h2 id=\"回流reflow又叫重排layout-当元素的尺寸-结构或者触发某些属性时浏览器会重新渲染页面称为回流-此时浏览器需要重新经过计算计算后还需要重新页面布局因此是较重的操作\"><a class=\"markdownIt-Anchor\" href=\"#回流reflow又叫重排layout-当元素的尺寸-结构或者触发某些属性时浏览器会重新渲染页面称为回流-此时浏览器需要重新经过计算计算后还需要重新页面布局因此是较重的操作\">#</a> 回流 (reflow)：又叫重排（layout）。当元素的尺寸、结构或者触发某些属性时，浏览器会重新渲染页面，称为回流。此时，浏览器需要重新经过计算，计算后还需要重新页面布局，因此是较重的操作。</h2>\n<blockquote>\n<p>常见的回流操作有：</p>\n<ul>\n<li>页面初次渲染</li>\n<li>浏览器窗口大小改变</li>\n<li>元素尺寸 / 位置 / 内容发生改变</li>\n<li>元素字体大小变化</li>\n<li>添加或者删除可见的 DOM 元素</li>\n<li>激活 CSS 伪类（:hover……）</li>\n<li>more ……</li>\n</ul>\n</blockquote>\n<h2 id=\"重点回流必定会触发重绘重绘不一定会触发回流-重绘的开销较小回流的代价较高\"><a class=\"markdownIt-Anchor\" href=\"#重点回流必定会触发重绘重绘不一定会触发回流-重绘的开销较小回流的代价较高\">#</a> 重点：回流必定会触发重绘，重绘不一定会触发回流。重绘的开销较小，回流的代价较高。</h2>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.nlark.com/yuque/0/2019/png/412560/1577760943909-4c193c10-3cf7-40a2-96e9-0a96b9704dea.png#align=left&amp;display=inline&amp;height=829&amp;name=169721e0dc217977.png&amp;originHeight=829&amp;originWidth=1227&amp;size=36160&amp;status=done&amp;style=none&amp;width=1227\" alt=\"169721e0dc217977.png\"></p>\n<h3 id=\"工作中要如何避免大量使用重绘与回流\"><a class=\"markdownIt-Anchor\" href=\"#工作中要如何避免大量使用重绘与回流\">#</a> 工作中要如何避免大量使用重绘与回流？</h3>\n<ol>\n<li>避免频繁操作样式，可汇总后统一一次修改</li>\n<li>尽量使用 class 进行样式修改，而不是直接操作样式</li>\n<li>减少 DOM 的操作，可使用字符串一次性插入</li>\n</ol>\n<hr>\n<blockquote>\n<p>以下资料来自于<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZTA5NmQ2M2U1MWQ0NTU4MzgxZTk5MDYjaGVhZGluZy0yOQ==\"> https://juejin.im/post/5e096d63e51d4558381e9906#heading-29</span></p>\n</blockquote>\n<h3 id=\"常见的会导致回流的元素\"><a class=\"markdownIt-Anchor\" href=\"#常见的会导致回流的元素\">#</a> 常见的会导致回流的元素：</h3>\n<ul>\n<li>常见的几何属性有 width、height、padding、margin、left、top、border 等等。</li>\n<li>最容易被忽略的操作：获取一些需要通过即时计算得到的属性，当你要用到像这样的属性：offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight 时，浏览器为了获取这些值，也会进行回流。</li>\n<li>当我们调用了 getComputedStyle 方法，或者 IE 里的 currentStyle 时，也会触发回流。原理是一样的，都为求一个 “即时性” 和 “准确性”。</li>\n</ul>\n<h3 id=\"避免方式\"><a class=\"markdownIt-Anchor\" href=\"#避免方式\">#</a> 避免方式：</h3>\n<ol>\n<li>避免逐条改变样式，使用类名去合并样式</li>\n<li>将 DOM “离线”, 使用 DocumentFragment</li>\n<li>提升为合成层，如使用 <code>will-change</code></li>\n</ol>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">#divId</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">will-change</span><span class=\"token punctuation\">:</span> transform<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"优点\"><a class=\"markdownIt-Anchor\" href=\"#优点\">#</a> 优点:</h3>\n<ul>\n<li>合成层的位图，会交由 GPU 合成，比 CPU 处理要快</li>\n<li>当需要 repaint 时，只需要 repaint 本身，不会影响到其他的层</li>\n<li>对于 transform 和 opacity 效果，不会触发 layout 和 paint</li>\n</ul>\n<p><strong>注意：</strong><br>\n部分浏览器缓存了一个 flush 队列，把我们触发的回流与重绘任务都塞进去，待到队列里的任务多起来、或者达到了一定的时间间隔，或者 “不得已” 的时候，再将这些任务一口气出队。但是当我们访问一些即使属性时，浏览器会为了获得此时此刻的、最准确的属性值，而提前将 flush 队列的任务出队。</p>\n",
            "tags": []
        }
    ]
}