{
    "version": "https://jsonfeed.org/version/1",
    "title": "开发随笔 • All posts by \"react\" tag",
    "description": "~虚拟建设者~",
    "home_page_url": "https://v-immor.github.io/v-blog",
    "items": [
        {
            "id": "https://v-immor.github.io/v-blog/2022/04/07/javascripts/react/ReactFiber%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/",
            "url": "https://v-immor.github.io/v-blog/2022/04/07/javascripts/react/ReactFiber%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/",
            "title": "React Fiber 是什么？",
            "date_published": "2022-04-07T10:32:00.000Z",
            "content_html": "<h2 id=\"从-react-的架构演进来看-react-为视图渲染做了哪些优化\"><a class=\"markdownIt-Anchor\" href=\"#从-react-的架构演进来看-react-为视图渲染做了哪些优化\">#</a> 从 React 的架构演进来看 React 为视图渲染做了哪些优化</h2>\n<p><strong>React 渲染页面主要可以看成两个阶段：</strong></p>\n<ul>\n<li><strong>调度阶段（reconciliation）：在这个阶段 React 会更新数据生成新的 Virtual DOM，然后通过 Diff 算法，快速找出需要更新的元素，放到更新队列中去，得到新的更新队列。</strong></li>\n<li><strong>渲染阶段（commit）：这个阶段 React 会遍历更新队列，将其所有的变更一次性更新到 DOM 上。</strong></li>\n</ul>\n<h3 id=\"react-15-架构\"><a class=\"markdownIt-Anchor\" href=\"#react-15-架构\">#</a> React 15 架构</h3>\n<p>在 React 15 及之前的版本中，渲染机制主要分成两层：</p>\n<ul>\n<li>Reconciler（协调器）：也就是属于调度阶段，主要负责找出变化的组件；</li>\n<li>Renderer（渲染器）：也就是属于渲染阶段，主要负责将变化的组件渲染到页面上；</li>\n</ul>\n<p><strong>在 React15 及之前的版本中，Reconciler 采用递归的方式创建虚拟 DOM ，递归过程是不能中断的，如果组件树的层级很深，递归会占用线程很多时间，递归更新时间超过了 16.666ms（在 60hz 屏幕下浏览器刷新一帧的时间），用户交互就会卡顿。</strong><br>\n<strong>React 15 及之前的版本中的 Reconciler 也称为 Stack Reconciler；</strong></p>\n<h3 id=\"react-16-架构\"><a class=\"markdownIt-Anchor\" href=\"#react-16-架构\">#</a> React 16 架构</h3>\n<p>为了解决之前的版本中 Reconciler 因递归无法中断，同步更新的线程占用过长时间导致用户交互掉帧的问题，React16 将递归的无法中断的更新重构为异步的可中断更新，由于曾经用于递归的虚拟 DOM 数据结构已经无法满足需要。所以 React 团队才会花费两年多的时间去将虚拟 DOM 演进为 Fiber，Stack Reconciler 重构为 Fiber Reconciler。<br>\nReact 16 带来了 Fiber，也进一步带来了 Concurrent Mode（并发模式）虽然 Concurrent Mode 一直推迟到 React 18 才正式推入生产环境。<br>\n相比之前的两层架构，React 16 则分成了三层：</p>\n<ul>\n<li>Scheduler（调度器）：属于调度阶段，负责协调任务的优先级，高优先级的任务先进入 Reconciler。</li>\n<li>Reconciler（协调器）：属于调度阶段，主要负责找出变化的组件。\n<ul>\n<li>与之前版本不同的是更新工作从递归变成了可以中断的循环过程。Reconciler 内部采用了 Fiber 的架构设计。</li>\n</ul>\n</li>\n<li>Renderer（渲染器）：也就是属于渲染阶段，主要负责将变化的组件渲染到页面上；</li>\n</ul>\n<h3 id=\"react-17-架构\"><a class=\"markdownIt-Anchor\" href=\"#react-17-架构\">#</a> React 17 架构</h3>\n<p>前文有提到过，React 16 虽然实现了底层虚拟 DOM 的重构，让异步更新可实现，但是并发更新的问题也随之而来，主要还在于 React16 的 expirationTimes 模型只能区分是否 &gt;=expirationTimes 决定节点是否更新。React17 的 lane 模型可以选定一个更新区间，并且动态的向区间中增减优先级，可以处理更细粒度的更新。</p>\n<blockquote>\n<p>Lane 用二进制位表示任务的优先级，方便优先级的计算（位运算），不同优先级占用不同位置的 “赛道”，而且存在批的概念，优先级越低，“赛道” 越多。高优先级打断低优先级，新建的任务需要赋予什么优先级等问题都是 Lane 所要解决的问题。</p>\n</blockquote>\n<p>所以 React 17 的版本更像是一个过渡版本，所做的工作主要为 React 18 做铺垫，为 Concurrent Mode 的正式推出做好准备。</p>\n<h3 id=\"react-18-架构\"><a class=\"markdownIt-Anchor\" href=\"#react-18-架构\">#</a> React 18 架构</h3>\n<blockquote>\n<p>最新正式版，延后整理。</p>\n</blockquote>\n<h2 id=\"什么是-fiber\"><a class=\"markdownIt-Anchor\" href=\"#什么是-fiber\">#</a> 什么是 Fiber?</h2>\n<blockquote>\n<p>部分摘抄于：<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzOTc1MTEyNjcxMjM5\">这可能是最通俗的 React Fiber (时间分片) 打开方式</span><br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNzA5NTY2Mg==\"> React Fiber 架构</span> – 司徒正美</p>\n</blockquote>\n<p><strong>Fiber 的英文含义是 “纤维”，它是比线程（Thread）更细的线，比线程（Thread）控制得更精密的执行模型。在广义计算机科学概念中，Fiber 又是一种协作的（Cooperative）编程模型（协程），帮助开发者用一种【既模块化又协作化】的方式来编排代码。</strong><br>\n<strong>Fiber 也不是一个新玩意，最早的时候是在微软的 DOS 操作系统。</strong><br>\n微软 DOS 是一个单任务操作系统，也称为’单工操作系统‘. 这种操作系统同一个时间只允许运行一个程序. invalid s 在《在没有 GUI 的时代 (只有一个文本界面），人们是怎么运行多个程序的？》 的回答中将其称为: ‘一种压根没有任务调度的 “残疾” 操作系统’。在这种系统中，你想执行多个任务，只能等待前一个进程退出，然后再载入一个新的进程。直到 Windows 3.x，它才有了真正意义的进程调度器，实现了多进程并发执行。<br>\n<strong>为了实现进程的并发，操作系统会按照一定的调度策略，将 CPU 的执行权分配给多个进程，多个进程都有被执行的机会，让它们交替执行，形成一种 “同时在运行” 假象，因为 CPU 速度太快，人类根本感觉不到。实际上在单核的物理环境下同时只能有一个程序在运行。</strong><br>\nJavaScript 也是单线程运行的，在浏览器环境中需要负责 JS 代码的解析和执行、绘制、事件处理、静态资源加载和处理，</p>\n<blockquote>\n<p>这里特指 Javascript 引擎是单线程运行的。 严格来说，Javascript 引擎和页面渲染引擎在同一个渲染线程，GUI 渲染和 Javascript 执行 两者是互斥的。另外异步 I/O 操作底层实际上可能是多线程的在驱动。</p>\n</blockquote>\n<p><strong>它只是一个单线程的脚本语言，同一时间只能做一件事情，这个和 DOS 的单任务操作系统一样的，事情只能一件一件的干。要是前面有一个憨批任务长期霸占 CPU，排在后面的任务就无法执行，浏览器会呈现卡死的状态，这样的用户体验就会非常差。</strong><br>\n对于 “前端框架” 来说，解决这种问题有三个方向：</p>\n<ol>\n<li>优化每个任务，让它有多快就多快。挤压 CPU 运算量。</li>\n<li>快速响应用户，让用户觉得够快，不能阻塞用户的交互。</li>\n<li>尝试 Worker 多线程。</li>\n</ol>\n<p>Vue 选择的是第 1 种，因为对于 Vue 来说，使用模板让它有了很多优化的空间，配合响应式机制可以让 Vue 可以精确地进行节点更新；而 React 选择了第 2 种，更快速地响应用户交互，将用户看不到的任务优先级降低执行；第 3 种 Worker 多线程渲染方案也有人尝试，要保证状态和视图的一致性相当麻烦。<br>\n<strong>所以 React 是怎么优化的？</strong><br>\n为了给用户制造一种应用很快的’假象’，我们不能让一个程序长期霸占着资源。你可以将浏览器的渲染、布局、绘制、资源加载 (例如 HTML 解析)、事件响应、脚本执行视作操作系统的’进程’，我们需要通过某些调度策略合理地分配 CPU 资源，从而提高浏览器的用户响应速率，同时兼顾任务执行效率。<br>\n<strong>在 React 中，Fiber 架构就是 React 16 为了让 React 渲染的过程可以被中断（主动让出机制），可以将控制权交回浏览器，让位给高优先级的任务，浏览器空闲后再恢复渲染。</strong><br>\n<strong>fiber 则是 Fiber 架构中的基础数据结构 / 执行单元，也可以说是在 React Fiber 架构中的 Virtual DOM。</strong></p>\n<h2 id=\"为什么有-react-fiber-而没有-vue-fiber\"><a class=\"markdownIt-Anchor\" href=\"#为什么有-react-fiber-而没有-vue-fiber\">#</a> 为什么有 React Fiber 而没有 Vue Fiber?</h2>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDc3NTQ1MTg0ODA3ODc4NjkyI2hlYWRpbmctNw==\">https://juejin.cn/post/7077545184807878692</span></p>\n</blockquote>\n<p>前文讲述了 Fiber 架构的厉害之处，属于系统级别的架构设计。但为什么没有 Vue Fiber? 是 Vue 团队不够优秀，还是没有考虑到？</p>\n<ul>\n<li>从架构设计就注定 React 和 Vue 的不同，关注点自然也不同。\n<ul>\n<li>架构开发模式不同：\n<ul>\n<li>React 架构属于完全运行时（纯 JS），编译时难以判断可优化项，主要靠的运行时的计算来提升性能；</li>\n<li>Vue 使用模板语法开发，可以在编译阶段对已确定的模板做出优化。</li>\n</ul>\n</li>\n<li>响应式架构实现不同：\n<ul>\n<li>React 主要通过 setState 来更新状态再驱动视图更新，完全遵循 immutable（不可变）数据源的理念。</li>\n<li>Vue 则通过双向绑定的响应式原理（数据劫持）监听变量，已达到直接修改变量即可驱动视图更新。</li>\n<li>React 的组件渲染是比较消耗性能的，因为 React 难以做到精准更新，当父组件状态更新了，所有的子组件会跟着一起渲染（可以通过 memo /shouldUpdateComponent 优化）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<ul>\n<li>React 的 Fiber 架构目前看到的结果更多的是为了将渲染工作进行时间切片处理，将之前版本的缺陷做修补，随后带来的异步更新和并发模式更像是 Fiber 架构带来的添头。</li>\n<li>Fiber 这种数据结构使得节点可以回溯到其父节点，只要保留下中断的节点索引，就可以恢复之前的工作进度；</li>\n<li>Vue 本身基于数据劫持的双向绑定，加上 Vue Diff 双向遍历优化，自然就不需要在运行时考虑更多的工作。</li>\n</ul>\n</blockquote>\n",
            "tags": [
                "原理",
                "React"
            ]
        },
        {
            "id": "https://v-immor.github.io/v-blog/2021/03/14/javascripts/react/React%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/",
            "url": "https://v-immor.github.io/v-blog/2021/03/14/javascripts/react/React%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/",
            "title": "React 的生命周期",
            "date_published": "2021-03-14T14:16:00.000Z",
            "content_html": "<h2 id=\"生命周期介绍\"><a class=\"markdownIt-Anchor\" href=\"#生命周期介绍\">#</a> 生命周期介绍</h2>\n<p>组件的生命周期可分成三个状态：</p>\n<ul>\n<li>Mounting：已插入真实 DOM</li>\n<li>Updating：正在被重新渲染</li>\n<li>Unmounting：已移出真实 DOM</li>\n</ul>\n<p>生命周期的方法有：</p>\n<ul>\n<li>\n<p><strong>componentWillMount</strong> 在渲染前调用，在客户端也在服务端。</p>\n</li>\n<li>\n<p><strong>componentDidMount</strong> : 在第一次渲染后调用，只在客户端。之后组件已经生成了对应的 DOM 结构，可以通过 this.getDOMNode () 来进行访问。 如果你想和其他 JavaScript 框架一起使用，可以在这个方法中调用 setTimeout, setInterval 或者发送 AJAX 请求等操作 (防止异步操作阻塞 UI)。</p>\n</li>\n<li>\n<p><strong>componentWillReceiveProps</strong> 在组件接收到一个新的 prop (更新后) 时被调用。这个方法在初始化 render 时不会被调用。</p>\n</li>\n<li>\n<p><strong>shouldComponentUpdate</strong> 返回一个布尔值。在组件接收到新的 props 或者 state 时被调用。在初始化时或者使用 forceUpdate 时不被调用。<br>\n可以在你确认不需要更新组件时使用。</p>\n</li>\n<li>\n<p><strong>componentWillUpdate</strong> 在组件接收到新的 props 或者 state 但还没有 render 时被调用。在初始化时不会被调用。</p>\n</li>\n<li>\n<p><strong>componentDidUpdate</strong> 在组件完成更新后立即调用。在初始化时不会被调用。</p>\n</li>\n<li>\n<p><strong>componentWillUnmount</strong> 在组件从 DOM 中移除之前立刻被调用。</p>\n</li>\n</ul>\n<h2 id=\"生命周期注意项\"><a class=\"markdownIt-Anchor\" href=\"#生命周期注意项\">#</a> 生命周期注意项:</h2>\n<p>需要注意<strong> componentWillMount、componentWillReceiveProps、componentWillUpdate</strong> 这三个生命周期函  数，React 官方有准备移除的计划，并且在最新的版本中已经更名为 **UNSAFE_XXX **。故，这些函数在开发项目时应避免使用。<br>\n移除原因：</p>\n<ol>\n<li><strong>componentWillMount：</strong></li>\n</ol>\n<blockquote>\n<p>componentWillMount () 在挂载之前被调用。它在 render () 之前调用，因此在此方法中同步调用 setState () 不会触发额外渲染。通常，我们建议使用 constructor () 来初始化 state。<br>\n避免在此方法中引入任何副作用或订阅。如遇此种情况，请改用 componentDidMount ()。<br>\n此方法是服务端渲染唯一会调用的生命周期函数。</p>\n</blockquote>\n<ol start=\"2\">\n<li><strong>componentWillReceiveProps：</strong></li>\n</ol>\n<blockquote>\n<p>componentWillReceiveProps () 会在已挂载的组件接收新的 props 之前被调用。如果你需要更新状态以响应 prop 更改（例如，重置它），你可以比较 this.props 和 nextProps 并在此方法中使用 this.setState () 执行 state 转换。<br>\n** 请注意，如果父组件导致组件重新渲染，即使 props 没有更改，也会调用此方法。** 如果只想处理更改，请确保      进行当前值与变更值的比较。<br>\n在挂载过程中，React 不会针对初始 props 调用 componentWillReceiveProps ()。组件只会在组件的 props 更    新时调用此方法。调用 this.setState () 通常不会触发 componentWillReceiveProps ()。</p>\n</blockquote>\n<ol start=\"3\">\n<li><strong>componentWillUpdate：</strong></li>\n</ol>\n<blockquote>\n<p>当组件收到新的 props 或 state 时，会在渲染之前调用 componentWillUpdate ()。使用此作为在更新发生之前执行准备更新的机会。初始渲染不会调用此方法。<br>\n** 注意，你不能此方法中调用 this.setState ()；** 在 componentWillUpdate () 返回之前，你也不应该执行任何其他操作（例如，dispatch Redux 的 action）触发对 React 组件的更新<br>\n通常，此方法可以替换为 componentDidUpdate ()。如果你在此方法中读取 DOM 信息（例如，为了保存滚动位置），则可以将此逻辑移至 getSnapshotBeforeUpdate () 中。</p>\n</blockquote>\n<h2 id=\"官方详细介绍\"><a class=\"markdownIt-Anchor\" href=\"#官方详细介绍\">#</a> 官方详细介绍</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWFjdC5kb2NzY2hpbmEub3JnL2RvY3MvcmVhY3QtY29tcG9uZW50Lmh0bWw=\">https://react.docschina.org/docs/react-component.html</span></p>\n<h2 id=\"版本生命周期图\"><a class=\"markdownIt-Anchor\" href=\"#版本生命周期图\">#</a> 版本生命周期图</h2>\n<h3 id=\"160前\"><a class=\"markdownIt-Anchor\" href=\"#160前\">#</a> 16.0 前</h3>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.nlark.com/yuque/0/2019/jpeg/412560/1573024477334-cdc75266-1c03-4456-8884-636590eb38e7.jpeg#align=left&amp;display=inline&amp;height=761&amp;originHeight=900&amp;originWidth=740&amp;size=0&amp;status=done&amp;width=626\" alt=\"\"></p>\n<h3 id=\"163\"><a class=\"markdownIt-Anchor\" href=\"#163\">#</a> 16.3</h3>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.nlark.com/yuque/0/2019/png/412560/1573024330391-de1ae95f-5765-4fc4-87f3-d65562021717.png#align=left&amp;display=inline&amp;height=673&amp;name=image.png&amp;originHeight=673&amp;originWidth=1175&amp;size=71548&amp;status=done&amp;width=1175\" alt=\"image.png\"></p>\n<h3 id=\"164\"><a class=\"markdownIt-Anchor\" href=\"#164\">#</a> 16.4</h3>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.nlark.com/yuque/0/2019/png/412560/1573024364754-4a3fc8cc-4e13-447e-87f0-88db049d1b8c.png#align=left&amp;display=inline&amp;height=665&amp;name=image.png&amp;originHeight=665&amp;originWidth=1169&amp;size=70468&amp;status=done&amp;width=1169\" alt=\"image.png\"></p>\n",
            "tags": [
                "原理",
                "React"
            ]
        }
    ]
}