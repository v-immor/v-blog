{
    "version": "https://jsonfeed.org/version/1",
    "title": "开发随笔 • All posts by \"面试\" tag",
    "description": "~虚拟建设者~",
    "home_page_url": "https://v-immor.github.io/v-blog",
    "items": [
        {
            "id": "https://v-immor.github.io/v-blog/posts/f8e09374.html",
            "url": "https://v-immor.github.io/v-blog/posts/f8e09374.html",
            "title": "Vue",
            "date_published": "2023-03-05T16:10:00.000Z",
            "content_html": "<h2 id=\"vue-原理\"><a class=\"markdownIt-Anchor\" href=\"#vue-原理\">#</a> Vue 原理</h2>\n<ol>\n<li class=\"quiz fill\">\n<p><code>Vue</code>  是什么？</p>\n</li>\n<li class=\"quiz fill\">\n<p><code>Vue</code>  的生命周期</p>\n</li>\n<li class=\"quiz fill\">\n<p><code>Vue</code>  为什么推荐使用 <code>模版语法</code> </p>\n</li>\n<li class=\"quiz fill\">\n<p><code>Vue</code>  的 Diff 原理</p>\n</li>\n<li class=\"quiz fill\">\n<p><code>Vue</code>  如何处理事件绑定</p>\n</li>\n<li>\n<p>``</p>\n</li>\n</ol>\n",
            "tags": [
                "面试"
            ]
        },
        {
            "id": "https://v-immor.github.io/v-blog/posts/ee69e452.html",
            "url": "https://v-immor.github.io/v-blog/posts/ee69e452.html",
            "title": "CSS",
            "date_published": "2023-03-03T14:34:00.000Z",
            "content_html": "<h2 id=\"基础\"><a class=\"markdownIt-Anchor\" href=\"#基础\">#</a> 基础</h2>\n<ol>\n<li class=\"quiz fill\">什么是  <code>BFC</code> ？</li>\n</ol>\n<h2 id=\"css3\"><a class=\"markdownIt-Anchor\" href=\"#css3\">#</a> CSS3</h2>\n<ol>\n<li class=\"quiz fill\">\n<p>描述一下  <code>flex</code>  及常用的属性含义</p>\n</li>\n<li></li>\n</ol>\n",
            "tags": [
                "面试"
            ]
        },
        {
            "id": "https://v-immor.github.io/v-blog/posts/2eec1551.html",
            "url": "https://v-immor.github.io/v-blog/posts/2eec1551.html",
            "title": "HTML",
            "date_published": "2023-03-03T14:34:00.000Z",
            "content_html": "<h2 id=\"基础\"><a class=\"markdownIt-Anchor\" href=\"#基础\">#</a> 基础</h2>\n<ol>\n<li class=\"quiz fill\">\n<p><code>DOCTYPE</code>  是什么？HTML4 和 HTML5 的  <code>DOCTYPE</code>  有什么区别？</p>\n</li>\n<li class=\"quiz fill\">\n<p>HTML  <code>语义化</code>  的理解</p>\n</li>\n<li class=\"quiz fill\">\n<p>前端页面有哪些组成部分？</p>\n<blockquote>\n<ul>\n<li><code>结构层</code> 、 <code>表示层</code> 、 <code>行为层</code></li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>块级元素和行内元素有什么区别，都有哪些？</p>\n</li>\n<li class=\"quiz fill\">\n<p>SEO 中的  <code>TDK</code>  是什么？</p>\n<blockquote>\n<ul>\n<li>title、description、key</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>img 上的  <code>title</code>  和  <code>alt</code>  有什么区别</p>\n</li>\n<li class=\"quiz fill\">\n<p><code>src</code>  和  <code>href</code>  有什么区别</p>\n</li>\n<li class=\"quiz fill\">\n<p>H5 和 HTML5 有什么区别</p>\n<blockquote>\n<ul>\n<li><code>H5</code>  一般指的是使用 HTML5、CSS3 的移动端网页应用；</li>\n<li><code>HTML</code>  指的是 HTML 第 5 版标准；</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"html5\"><a class=\"markdownIt-Anchor\" href=\"#html5\">#</a> HTML5</h2>\n",
            "tags": [
                "面试"
            ]
        },
        {
            "id": "https://v-immor.github.io/v-blog/posts/cc1b9611.html",
            "url": "https://v-immor.github.io/v-blog/posts/cc1b9611.html",
            "title": "JavaScript",
            "date_published": "2023-02-24T23:04:24.000Z",
            "content_html": "<h2 id=\"js-基础\"><a class=\"markdownIt-Anchor\" href=\"#js-基础\">#</a> JS 基础</h2>\n<ol>\n<li class=\"quiz fill\">\n<p>JS 的数据类型有哪些？</p>\n<blockquote>\n<ol>\n<li>基本数据类型 ( <code>string</code> 、 <code>number</code> 、 <code>boolean</code> 、 <code>null</code> 、 <code>undefined</code> 、 <code>symbol</code> 、 <code>bigInt</code> )</li>\n<li>引用数据类型（ <code>Object</code> 、 <code>Function</code> 、 <code>Date</code> 、 <code>Array</code> ）</li>\n<li>基本数据类型的存放在栈内存中，引用数据类型的引用指针存放于栈内存，内容存放于堆内存中。</li>\n</ol>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>JS 的继承方式，各种继承方式的优缺点及实现方式</p>\n<blockquote>\n<ul>\n<li>\n<ol>\n<li><code>原型链继承</code> ；2.  <code>借用构造函数继承</code> ；3.  <code>组合继承</code> ；4.  <code>原型式继承</code> ；5.  <code>寄生式继承</code> ；6.  <code>寄生组合式继承</code> ；</li>\n</ol>\n</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>JS 的执行环境和作用域、作用域链</p>\n<blockquote>\n<blockquote>\n<ul>\n<li><strong>关键词</strong>：作用域 -&gt;  <code>Scope</code> 、变量对象 -&gt;  <code>VO</code> 、活动对象 -&gt;  <code>AO</code> 、全局对象 -&gt;  <code>GO</code> 、作用域链 -&gt;  <code>[[Scopes]]</code> 、变量环境 -&gt;  <code>VE</code></li>\n</ul>\n</blockquote>\n<ul>\n<li>执行环境：在 JS 中大致有三种执行环境  <code>Global</code> 、 <code>Function</code> 、 <code>eval</code> ，在 JS 代码执行时，解释器会创建执行环境，作用域、变量对象、this 的执行；JS 代码在运行时会进入不同的执行环境，执行环境是以栈的形式存储。当执行环境的代码执行完后就会弹出，直到 global 环境会在页面关闭时销毁。执行环境栈和执行栈是两个东西，虽然基本理念相似，执行栈的栈元素是函数、执行环境栈的栈元素是代码。执行环境栈在 JS 解释阶段创建，执行栈在运行阶段创建。</li>\n<li><code>作用域</code> 指的是当前执行环境能够访问到 <code>变量对象（VO）</code> ，作用域随着执行环境一同创建、里层环境可以访问到外层环境的作用域，也就是可以通过 <code>作用域链</code> 访问到外层环境作用域内的变量对象。</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>new</code>  的原理和实现</p>\n<blockquote>\n<ul>\n<li>\n<p><code>new</code>  主要是将一个新对象的原型指向构造函数的原型，并在这个对象上注入属性后将其返回。</p>\n</li>\n<li>\n<p>实现  <code>new</code>  的步骤有</p>\n<ol>\n<li>创建一个新对象。</li>\n<li>把这个对象的原型指向构造函数的原型</li>\n<li>通过构造函数将属性初始化</li>\n<li>返回这个对象。</li>\n</ol>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">myNew</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">constructor<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  obj<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> constructor<span class=\"token punctuation\">.</span>prototype</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">return</span> obj</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>bind</code> 、 <code>call</code> 、 <code>apply</code>  的原理和实现</p>\n<blockquote>\n<ul>\n<li>三者的本质都是通过改变 this 的指向来借用函数，不同的是  <code>bind</code>  是返回一个待调用的函数， <code>call</code>  和  <code>apply</code>  返回的是执行结果</li>\n<li><code>bind</code> 、 <code>call</code> 、 <code>apply</code>  的第一个参数都是 <code>借用方</code> ，也就是函数执行时 this 的指向；</li>\n<li><code>bind</code>  除了第一个参数外，剩余的参数会依次作为被借函数的入参，返回的函数的入参的顺序会在  <code>bind</code>  参数的后续依次入参；</li>\n<li><code>call</code>  除了第一个参数外，剩余的参数会依次作为被借函数的入参；</li>\n<li><code>apply</code>  的第二个参数是一个类数组，参数会按序作为被借用函数的入参；</li>\n</ul>\n</blockquote>\n<blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> context <span class=\"token operator\">||</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  ctx<span class=\"token punctuation\">[</span>fn<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">const</span> args <span class=\"token operator\">=</span> arguments</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> ctx<span class=\"token punctuation\">[</span>fn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> context <span class=\"token operator\">||</span> window</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  ctx<span class=\"token punctuation\">[</span>fn<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">[</span>fn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">delete</span> ctx<span class=\"token punctuation\">[</span>fn<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> context <span class=\"token operator\">||</span> window</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">const</span> symbol <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  ctx<span class=\"token punctuation\">[</span>symbol<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">[</span>symbol<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">delete</span> ctx<span class=\"token punctuation\">[</span>symbol<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>什么是原型，什么是原型链？</p>\n<blockquote>\n<ul>\n<li>原型就是对象。JS 的对象系统是基于原型模式设计的，在原型模式里有一个原则是 “要得到一个对象，不是通过实例化类，而是找到一个对象作为原型并克隆这个对象。”</li>\n<li>原型链就是对象之间的关联，在 JS 中实例对象的  <code>__proto__</code>  会指向其构造函数的原型  <code>prototype</code> ，构造函数的原型对象的  <code>__protot__</code>  也会指向这个原型对象构造函数的  <code>prototype</code> ，一直到  <code>Object.prototype.__proto__</code>  为止，这种链式向上关联就是 <code>原型链 </code></li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>什么是闭包？有什么应用场景？</p>\n<blockquote>\n<ul>\n<li>闭包是指在函数内使用了非函数内的变量，导致这个变量无法在其作用域销毁时销毁的现象。</li>\n<li>即使是创建这个变量上下文已经销毁，但这个变量它依旧存在内存中，这种现象就是 <code>闭包</code> 。</li>\n<li>在代码中引用了自由变量也会造成闭包现象。</li>\n<li>在闭包现象中，上下文的销毁时，它的 <code>活动变量(AO)</code>  不一定会从作用域链中移除，所以闭包函数可以通过作用域链访问到这个变量；</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>typeof</code>  和  <code>instanceOf</code>  的原理和区别</p>\n<blockquote>\n<ul>\n<li><code>typeof</code>  判断的是对象在内存上的存储类型， <code>instanceOf</code>  判断的是原型链上的原型。</li>\n<li><code>typeof</code>  只能判断除  <code>null</code>  外的基本数据类型和  <code>object</code> 、 <code>function</code> ，无法判断实例的原型， <code>instanceOf</code>  不能判断  <code>number</code> 、 <code>string</code> 、 <code>boolean</code>  类型，可以判断实例的原型，可以区分  <code>Array</code>  和  <code>Object</code> 。</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>什么是变量提升</p>\n<blockquote>\n<ul>\n<li>在变量未定义时就能够使用的现象就是 <code>变量提升</code></li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>this</code>  是什么？</p>\n<blockquote>\n<ol>\n<li><code>this</code>  是函数执行的主体，如果将最外层当成一个  <code>main</code>  函数来看，那  <code>main</code>  的主体就是  <code>window</code>  或者是  <code>global</code> 。</li>\n<li>总的来说就是谁调用的函数  <code>this</code>  就会指向谁，箭头函数除外。</li>\n</ol>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>描述 JS 的事件循环？</p>\n<blockquote>\n<ul>\n<li><code>Event Loop</code>  是 JS 处理任务的工作循环，会不断地从任务队列中取出任务到执行栈中执行。</li>\n<li>一个简单的循环结构： <code>同步代码</code>  -&gt; 清空  <code>微任务</code>  队列 -&gt; 取出一个 <code>宏任务</code> 加入执行栈中执行 -&gt; 清空  <code>微任务</code>  队列…</li>\n<li>因为 JS 是单线程执行的，所以除了  <code>setTimeout</code>  、 <code>setInterval</code>  在计时器线程中异步执行计时，是真正的异步任务，其回调函数，都是 <code>伪异步</code> ，只是执行的时机不同导致其 <code>异步</code> 的现象。</li>\n<li><code>宏任务</code>  和  <code>微任务</code>  的区别主要在于执行时机， <code>宏任务</code>  是每个循环的起始，在每个宏任务执行完时，会将微任务队列中的任务全部加入到执行栈中执行，直到微任务队列清空，才会尝试去取出 <code>宏任务</code> ，进入下一个循环。并且在每个宏任务之间会去问询  <code>GUI 渲染线程</code>  是否要工作，若  <code>GUI 渲染线程</code>  要进行工作，则会将  <code>JS 引擎线程</code>  进行挂起，等待响应。</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>哪些任务是宏任务？哪些事件是微任务？宏任务和微任务的区别</p>\n<blockquote>\n<ul>\n<li><code>setTimeout</code> 、 <code>setInterval</code> 、 <code>setImmediate</code> 、 <code>requestAnimationFrame</code> 、 <code>requestIdleCallback</code> 、 <code>MessageChannel</code>  属于宏任务， <code>Promise.then</code> 、 <code>MutationObserver</code> 、 <code>process.nextTick</code></li>\n<li>宏任务是在事件循环的起始执行的，微任务是在循环的末尾执行；</li>\n<li><code>setTimeout</code> / <code>setInterval</code>  创建的宏任务，有一个最短 4ms 的延迟，也就是两个循环之间最短时间是 4ms；</li>\n<li><code>requestAnimationFrame</code>  是浏览器按帧执行的，约为 16.6ms，若页签处于后台时，不更新帧则不会执行；</li>\n<li><code>requestIdleCallback</code>  仅在浏览器渲染执行完还有剩余时间时会执行，没有时间则不执行；</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>为什么 <strong>for</strong> 循环的性能比 <strong>forEach</strong> 高？</p>\n<blockquote>\n<ol>\n<li><code>for</code>  没有创建额外的调用栈和上下文，遍历的是索引， <code>forEach</code>  会创建额外的调用栈和上下文，调用的是函数，这会造成性能上的损耗；</li>\n<li>在没达到一定数量级之前，两种循环的性能差异极小，使用  <code>forEach</code>  可以让代码的语义更加明显；</li>\n</ol>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>描述一下 V8 引擎的 <code>垃圾回收机制</code> ，如何定位内存泄露？</p>\n</li>\n</ol>\n<h2 id=\"es6\"><a class=\"markdownIt-Anchor\" href=\"#es6\">#</a> ES6</h2>\n<ol start=\"0\">\n<li class=\"quiz fill\">\n<p>ES6 有哪些新特性？</p>\n<blockquote>\n<p>ES6 主要的新特性有</p>\n<ol>\n<li>拥有  <code>块级作用域</code>  的  <code>const</code>  和  <code>let</code></li>\n<li><code>箭头函数</code></li>\n<li>便捷操作对象、数组的 <code>扩展运算符</code></li>\n<li>用于处理异步任务的  <code>Promise</code></li>\n<li>定义类的  <code>Class</code>  语法糖</li>\n<li>比  <code>definePrototype</code>  更加安全友好的  <code>Proxy</code>  代理对象</li>\n<li>新的数据结构  <code>Set</code> 、 <code>WeakSet</code> 、 <code>Map</code> 、 <code>WeakMap</code></li>\n<li>新的基础数据类型  <code>Symbol</code></li>\n<li>一些数组方法…</li>\n</ol>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>var</code> 、 <code>const</code> 、 <code>let</code>  有什么区别？如何用 var 模拟 const 和 let？</p>\n<blockquote>\n<ol>\n<li><code>var</code>  定义的变量，可以在定义前使用，存在变量提升， <code>const</code>  和  <code>let</code>  定义的变量不能够在定义前使用，存在 <code>暂时性死区</code> 的概念。</li>\n<li><code>const</code>  定义的变量不能修改，  <code>let</code>  定义的变量可以修改。 <code>const</code>  的不能修改指的是栈中引用不能够修改，对内部的属性依旧是可以修改的。</li>\n<li><code>const</code>  和  <code>let</code>  声明的变量在同一作用域内不能重复声明， <code>var</code>  可以重复声明</li>\n</ol>\n</blockquote>\n<blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> _scope <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> _variables <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> _variables<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">var</span> property <span class=\"token operator\">=</span> _variables<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_scope<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnPropertype</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SyntaxError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'存在重复声明`'</span> <span class=\"token operator\">+</span> key <span class=\"token operator\">+</span> <span class=\"token string\">'`变量'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>_scope<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReferenceError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'变量`'</span> <span class=\"token operator\">+</span> property <span class=\"token operator\">+</span> <span class=\"token string\">'`未定义'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">_checkScope</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">property</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_scope<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnPropertype</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SyntaxError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不可重复声明'</span> <span class=\"token operator\">+</span> key <span class=\"token operator\">+</span> <span class=\"token string\">'变量'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">_let</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token function\">_checkScope</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>_scope<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token keyword\">return</span> value</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      value <span class=\"token operator\">=</span> val</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">_const</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token function\">_checkScope</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>_scope<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      <span class=\"token keyword\">return</span> value</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不可修改变量'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>箭头函数</code> 和普通函数有什么区别？</p>\n<blockquote>\n<ul>\n<li>箭头函数没有  <code>this</code>  指向的烦恼</li>\n<li>箭头函数不能够作为构造函数使用，也就是不能够和  <code>new</code>  搭配使用</li>\n<li>箭头函数默认是一种匿名函数</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>什么是  <code>Promise</code> ?</p>\n<blockquote>\n<ul>\n<li><code>Promise</code>  是  <code>ECMAScript</code>  提出解决 JS 中 <code>回调地狱</code> 问题的异步编程方案。</li>\n<li><code>Promise</code>  认为任务执行后必然会存在一个结果， <code>成功</code>  / <code>失败</code> 。将任务的状态定义为  <code>pending</code> 、 <code>fulfilled</code> 、 <code>rejected</code>  三种状态，当任务从  <code>pending</code>  开始执行时，必然会到达  <code>fulfilled</code>  或者  <code>rejected</code>  的其中一个状态。</li>\n<li>通过  <code>Promise</code>  定义的异步任务，在  <code>EventLoop</code>  中属于 <code>微任务</code> ，会在当前循环中完成执行。</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>实现一个  <code>Promise</code> </p>\n<blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">FULFILLED</span> <span class=\"token operator\">=</span> <span class=\"token string\">'fulfilled'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">REJECTED</span> <span class=\"token operator\">=</span> <span class=\"token string\">'rejected'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">PENDING</span> <span class=\"token operator\">=</span> <span class=\"token string\">'pending'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">scheduleCallBack</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">resolvePromise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promise<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">===</span> promise<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Chaining cycle detected for promise'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> x <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">let</span> executed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">const</span> then <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>then</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> then <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function\">then</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          x<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>executed<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            executed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token function\">resolvePromise</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>executed<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            executed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>executed<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      executed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">IPromise</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  status <span class=\"token operator\">=</span> <span class=\"token constant\">PENDING</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  value <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  reason <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  fulfilledCallbacks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  rejectedCallbacks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">exec</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token constant\">PENDING</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reason <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fulfilledCallbacks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rejectedCallbacks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">const</span> that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">IPromise</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        value<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">PENDING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        that<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        that<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token constant\">FULFILLED</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        that<span class=\"token punctuation\">.</span>fulfilledCallbacks<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cb</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">PENDING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        that<span class=\"token punctuation\">.</span>reason <span class=\"token operator\">=</span> reason</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        that<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token constant\">REJECTED</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        that<span class=\"token punctuation\">.</span>rejectedCallbacks<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cb</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>      <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>  <span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">onFulfilled<span class=\"token punctuation\">,</span> onRejected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token comment\">// prettier-ignore</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    onFulfilled <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> onFulfilled <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">?</span> <span class=\"token function-variable function\">onFulfilled</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> value</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token comment\">// prettier-ignore</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    onRejected <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> onRejected <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">?</span> <span class=\"token function-variable function\">onRejected</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">throw</span> e <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IPromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">FULFILLED</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token function\">scheduleCallBack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>          <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token function\">onFulfilled</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token function\">resolvePromise</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">REJECTED</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token function\">scheduleCallBack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>          <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>            <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token function\">onRejected</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reason<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token function\">resolvePromise</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fulfilledCallbacks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>          <span class=\"token function\">scheduleCallBack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>              <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token function\">onFulfilled</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>              <span class=\"token function\">resolvePromise</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>              <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rejectedCallbacks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>          <span class=\"token function\">scheduleCallBack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>              <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token function\">onRejected</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reason<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>              <span class=\"token function\">resolvePromise</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>              <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    <span class=\"token keyword\">return</span> promise</pre></td></tr><tr><td data-num=\"141\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>实现一下常见的  <code>Promise</code>  方法</p>\n<blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promises</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IPromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> promises<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       IPromise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>promises<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>reject<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">function</span> <span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promises</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IPromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> promises<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       IPromise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>promises<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>len <span class=\"token operator\">===</span> promises<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> <span class=\"token keyword\">function</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IPromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> <span class=\"token keyword\">function</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IPromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res<span class=\"token punctuation\">,</span> rej</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">rej</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre> <span class=\"token keyword\">function</span> <span class=\"token function\">allSettled</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promises</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IPromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     <span class=\"token keyword\">const</span> plen <span class=\"token operator\">=</span> promises<span class=\"token punctuation\">.</span>length</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> plen<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>       IPromise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>promises<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>         <span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>           res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>             <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> <span class=\"token constant\">FULFILLED</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>             <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> val<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>           len<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">===</span> plen<span class=\"token punctuation\">)</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>         <span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>           res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>             <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> <span class=\"token constant\">REJECTED</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>             <span class=\"token literal-property property\">reason</span><span class=\"token operator\">:</span> reason<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>           len<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">===</span> plen<span class=\"token punctuation\">)</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>       <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre> <span class=\"token keyword\">function</span> <span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">onRejected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> onRejected<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre> <span class=\"token keyword\">function</span> <span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cb</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>     <span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> IPromise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>     <span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>       IPromise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>         <span class=\"token keyword\">throw</span> reason</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>   <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>什么是  <code>Proxy</code> ？</p>\n<blockquote>\n<ul>\n<li><code>Proxy</code>  是代理对象，通过在被代理对象上套一层拦截机制，让代理对象进行操作时可以做更多的事情；</li>\n<li><code>Proxy</code>  是一个构造函数，一个入参是被代理对象，第二个是  <code>handler</code>  对象，通过拦截对象属性可以提供  <code>13</code>  种操作的拦截；</li>\n<li><code>get</code> 、 <code>set</code> 、 <code>has</code> 、 <code>apply</code> 、 <code>construct</code> 、 <code>ownKeys</code> 、 <code>defineProperty</code> 、 <code>deleteProperty</code> 、 <code>getPrototypeOf</code> 、 <code>setPrototypeOf</code> 、 <code>getOwnPropertyDescriptor</code> 、 <code>preventExtensions</code> 、 <code>isExtensible</code></li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>什么是  <code>Reflect</code> ？</p>\n<blockquote>\n<ul>\n<li><code>Reflect</code>  是反射对象，是 JS 的内置对象，提供 JS 对象操作的拦截方法，所有的方法都是静态方法，不能够进行实例化。</li>\n<li><code>Reflect</code>  通常搭配  <code>Proxy</code>  一起使用，其内部方法也和  <code>Proxy</code>  的 hanlder 一一对应，主要是作用域  <code>Proxy</code>  中的  <code>Receiver</code>  让  <code>Proxy</code>  可以正确地处理  <code>Receiver</code>  的引用，保证代理对象在劫持时可以获取到正确的  <code>this</code>  指向。</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>Proxy</code>  和  <code>Object.defineProperty</code>  的区别</p>\n<blockquote>\n<ol>\n<li><code>Proxy</code>  是 ES6 提供对象代理方法， <code>Proxy</code>  只是将对象进行代理，后续操作都是对代理对象操作进行拦截。对原对象没有变动；</li>\n<li><code>Object.defineProperty</code>  则是对对象的属性进行拦截，但对象新增的属性是监听不到的，需要对新属性也进行  <code>observer</code>  处理，比如 array 的 push、unshift 等操作时监听不到新值，或者监听异常的，这是由于 length 的变化导致新的索引没有被监听处理</li>\n</ol>\n<ul>\n<li><code>Proxy</code>  代理的是整个对象，可以通过  <code>get</code>  /  <code>set</code>  等方法劫持所有的一级属性， <code>Object.defineProperty</code>  监听的是对象本身的属性，需要逐个劫持每个属性；</li>\n<li><code>Proxy</code>  和  <code>Object.defineProperty</code>  都只能够劫持对象自身的属性，而不能够深层劫持内部对象的属性，都需要进行递归处理深层对象，才能够完整劫持到全部属性；</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>Set</code> 、 <code>WeakSet</code> 、 <code>Map</code> 、 <code>WeakMap</code>  的区别</p>\n</li>\n<li class=\"quiz fill\">\n<p><code>async</code> / <code>await</code>  和  <code>Promise</code>  的区别</p>\n</li>\n</ol>\n<h2 id=\"应用\"><a class=\"markdownIt-Anchor\" href=\"#应用\">#</a> 应用</h2>\n<ol>\n<li class=\"quiz fill\">\n<p>防抖和节流的区别，如何实现？</p>\n<blockquote>\n<ul>\n<li>防抖是指短时间内连续执行一个函数，只会产生一个有效执行。</li>\n<li>节流是指短时间内连续执行一个函数时，会以固定的频率产生有效执行。</li>\n<li>防抖常用于即时搜索，点击按钮中。</li>\n<li>节流常用于滚动事件、监听事件。</li>\n</ul>\n</blockquote>\n<blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task<span class=\"token punctuation\">,</span> ms</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> agrs <span class=\"token operator\">=</span> arguments</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span> <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">task</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>agrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ms<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task<span class=\"token punctuation\">,</span> ms</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">let</span> last <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">const</span> now <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>last <span class=\"token operator\">||</span> now <span class=\"token operator\">-</span> last <span class=\"token operator\">>=</span> ms<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      last <span class=\"token operator\">=</span> now</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token function\">task</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>实现一个  <code>sleep</code>  函数</p>\n<blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 这种实现方式阻塞的是同步代码，阻塞了执行栈，是最接近 ms 的实现，还可以通过 Promise 实现</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ms</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> now <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">>=</span> <span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>实现一个  <code>add</code>  函数，满足  <code>add(1, 2, 3)</code>  和  <code>add(1)(2)(3)</code>  值相等（ <code>柯里化</code> ）</p>\n<blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>rest</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    nums<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>rest<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> fn</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  fn<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toString</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pre<span class=\"token punctuation\">,</span> cur</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> pre <span class=\"token operator\">+</span> cur<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">return</span> fn</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>实现一个  <code>compose</code>  函数</p>\n<blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> tasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> v</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> tasks<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">const</span> first <span class=\"token operator\">=</span> tasks<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> tasks<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token parameter\">pre<span class=\"token punctuation\">,</span> cur</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">cur</span><span class=\"token punctuation\">(</span><span class=\"token function\">pre</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    first</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>实现一个  <code>flatten</code>  函数</p>\n<blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 递归法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> item <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 迭代法</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">const</span> queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>f<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">else</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>JS 异步解决方案的发展历程以及优缺点</p>\n<blockquote>\n<ul>\n<li><code>回调函数</code>  -&gt;  <code>Promise</code>  -&gt;  <code>Generator</code>  -&gt;  <code>async/await</code></li>\n<li><code>回调地狱</code>  -&gt;  <code>链式地狱</code>  -&gt;  <code>语义古怪</code>  -&gt; 同步代码解决异步任务</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>Promise</code>  构造函数是同步执行还是异步执行，那么  <code>then</code>  方法呢？</p>\n<blockquote>\n<p>构造函数是同步执行的， <code>then</code>  是  <code>resolve</code>  调用后产生的微任务，属于异步执行</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'同步执行'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'异步执行'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>实现一个异步任务并发调度函数</p>\n<blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">asyncScheudle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tasks<span class=\"token punctuation\">,</span> limit <span class=\"token operator\">=</span> <span class=\"token number\">3</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">let</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task<span class=\"token punctuation\">,</span> runIdx</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">asyncTask</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          result<span class=\"token punctuation\">[</span>runIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          idx <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">===</span> tasks<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token keyword\">throw</span> error</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          count <span class=\"token operator\">-=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> limit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">asyncTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>asyncTask<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    tasks<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tk<span class=\"token punctuation\">,</span> idx</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>tk<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>实现 <code>数组转树</code> 和 <code>树转数组</code> 的方法</p>\n<blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// prettier-ignore</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> tree <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'1-1'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'string-1'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'1-1-1'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'string-1-1'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'1-1-2'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'string-1-2'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'1-2'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'string-2'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">treeToArray</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tree</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">bfs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>node<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">parentId</span><span class=\"token operator\">:</span> parent <span class=\"token operator\">?</span> parent<span class=\"token punctuation\">.</span>id <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>children <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// prettier-ignore</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">parentId</span><span class=\"token operator\">:</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'1-1'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'string-1'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">parentId</span><span class=\"token operator\">:</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'1-1-1'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'string-1-1'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">parentId</span><span class=\"token operator\">:</span><span class=\"token string\">'1-1'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'1-1-2'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'string-1-2'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">parentId</span><span class=\"token operator\">:</span><span class=\"token string\">'1-1'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'1-2'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'string-2'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">parentId</span><span class=\"token operator\">:</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">arrayToTree</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">buildTree</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nodes<span class=\"token punctuation\">,</span> parentId <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> nodes</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> node<span class=\"token punctuation\">.</span>parentId <span class=\"token operator\">===</span> parentId<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token operator\">...</span>node<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        parentId<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n</li>\n</ol>\n",
            "tags": [
                "面试"
            ]
        },
        {
            "id": "https://v-immor.github.io/v-blog/posts/b7e144d1.html",
            "url": "https://v-immor.github.io/v-blog/posts/b7e144d1.html",
            "title": "算法",
            "date_published": "2023-02-24T15:00:51.000Z",
            "content_html": "<h2 id=\"基础排序\"><a class=\"markdownIt-Anchor\" href=\"#基础排序\">#</a> 基础排序</h2>\n<h2 id=\"基础遍历\"><a class=\"markdownIt-Anchor\" href=\"#基础遍历\">#</a> 基础遍历</h2>\n<h2 id=\"回溯算法\"><a class=\"markdownIt-Anchor\" href=\"#回溯算法\">#</a> 回溯算法</h2>\n<h2 id=\"双指针\"><a class=\"markdownIt-Anchor\" href=\"#双指针\">#</a> 双指针</h2>\n<h2 id=\"动态规划\"><a class=\"markdownIt-Anchor\" href=\"#动态规划\">#</a> 动态规划</h2>\n<h2 id=\"贪心算法\"><a class=\"markdownIt-Anchor\" href=\"#贪心算法\">#</a> 贪心算法</h2>\n<h2 id=\"滑动窗口\"><a class=\"markdownIt-Anchor\" href=\"#滑动窗口\">#</a> 滑动窗口</h2>\n<h2 id=\"哈希表\"><a class=\"markdownIt-Anchor\" href=\"#哈希表\">#</a> 哈希表</h2>\n<h2 id=\"树操作\"><a class=\"markdownIt-Anchor\" href=\"#树操作\">#</a> 树操作</h2>\n<h2 id=\"链表操作\"><a class=\"markdownIt-Anchor\" href=\"#链表操作\">#</a> 链表操作</h2>\n",
            "tags": [
                "面试"
            ]
        },
        {
            "id": "https://v-immor.github.io/v-blog/posts/764f33bc.html",
            "url": "https://v-immor.github.io/v-blog/posts/764f33bc.html",
            "title": "工程化",
            "date_published": "2023-02-24T15:00:51.000Z",
            "content_html": "<h2 id=\"基础\"><a class=\"markdownIt-Anchor\" href=\"#基础\">#</a> 基础</h2>\n<ol>\n<li class=\"quiz fill\">\n<p>什么是 <code>模块化</code> ？有哪些标准？都有什么区别</p>\n</li>\n<li class=\"quiz fill\">\n<p>什么是 <code>工程化</code> ？</p>\n</li>\n<li class=\"quiz fill\">\n<p><code>import</code>  和  <code>require</code>  的区别？</p>\n<blockquote>\n<ul>\n<li><code>require</code>  是  <code>CommonJS</code>  的标准，引入模块是运行时同步执行的，可以在运行时使用，引入是模块的值拷贝，不会共享模块的变量；搭配的导出语法是 <code>moudle.exports</code></li>\n<li><code>import</code>  是  <code>ES Module</code>  的标准，引入模块是编译时异步加载的，早期的版本不允许在运行时调用，引入的是模块的值引用，可以共享模块变量；导出语法是 <code>export</code></li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"npm\"><a class=\"markdownIt-Anchor\" href=\"#npm\">#</a> NPM</h2>\n<ol>\n<li class=\"quiz fill\">\n<p><code>npm</code>  的安装流程</p>\n<blockquote>\n<ul>\n<li><code>npm install</code>  -&gt; 查找  <code>package.json</code>  -&gt; 获取远程包信息 -&gt; 构建依赖结构 -&gt; 查找缓存 -&gt; 下载远程包 -&gt; 添加到缓存 -&gt; 添加到  <code>node_modules</code>  -&gt; 生成 / 更新  <code>package-lock.json</code> ;</li>\n<li><code>npm install</code>  -&gt; 比对  <code>package.json</code>  和  <code>package-lock.json</code>  -&gt; 查找缓存 -&gt; 添加到  <code>node_modules</code></li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>npm</code>  如何解决依赖冲突？</p>\n<blockquote>\n<ul>\n<li>在依赖的包中新增  <code>node_modules</code> ，项目中的依赖优先置于顶层包，其余相同依赖会在对应的包下；</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>npm</code> 、 <code>yarn</code> 、 <code>pnpm</code>  的区别</p>\n</li>\n<li class=\"quiz fill\">\n<p>为什么需要  <code>.lock</code>  文件，它的作用是什么</p>\n</li>\n</ol>\n<h2 id=\"webpack\"><a class=\"markdownIt-Anchor\" href=\"#webpack\">#</a> Webpack</h2>\n<ol start=\"0\">\n<li class=\"quiz fill\">\n<p><code>Webpack</code>  能做什么？</p>\n<blockquote>\n<ol>\n<li>模块打包。</li>\n<li>编译兼容。 -&gt; 通过  <code>webpack</code>  置入兼容代码可以将一些兼容代码隔离出项目，可以将浏览器无法理解的文件转换成可理解的文件。</li>\n<li>能力扩展。 -&gt; 通过  <code>webpack</code>  的插件机制，可以在实现代码兼容和模块化的基础上，实现 <code>按需加载</code> 、 <code>代码压缩</code> 、 <code>移除冗余代码</code> 等功能。</li>\n</ol>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>Webpack</code>  打包原理</p>\n<blockquote>\n<ul>\n<li>在  <code>webpack</code>  中会将所有文件都视为 <code>模块</code> ， <code>webpack</code>  的职责就是将这些 <code>模块</code> 经过  <code>loader</code>  的文件转换和  <code>plugin</code>  的处理打包输出成客户端可理解运行的静态资源。</li>\n<li><code>webpack</code>  的运行逻辑是</li>\n</ul>\n<ol>\n<li>初始化配置参数；</li>\n<li>通过配置参数，初始化  <code>Compiler</code>  对象，加载所有配置的插件，执行  <code>run()</code>  ，开始编译；</li>\n<li>确定入口模块，从入口模块开始，按顺序调用所有的  <code>loader</code>  对模块进行转换，并分析出模块的依赖关系，直到所有依赖的模块都经过这些处理。</li>\n<li>经过上一步的处理可以得到每个模块的翻译的最终内容，以及模块的依赖关系；</li>\n<li>根据模块的依赖关系，形成一个个  <code>Chunk</code>  内容，再把  <code>Chunk</code>  转化成文件，加入到输出列表。</li>\n<li>将上一步的输出列表，结合配置参数，确定输出的路径和文件名，写入到文件系统中。</li>\n</ol>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>plugin</code>  和  <code>loader</code>  的区别</p>\n<blockquote>\n<ol>\n<li><code>plugin</code>  会在  <code>Complier</code>  对象初始化的时候加载，在  <code>webpack</code>  运行的特定时期触发， <code>loader</code>  是在进行模块分析时按顺序执行，用于翻译转化文件。</li>\n<li><code>loader</code>  只用于文件转换， <code>plugin</code>  则基于 <code>发布-订阅</code> 模式，通过监听不同的事件，来执行不同的操作。</li>\n<li><code>loader</code>  的执行是同步的，上一个  <code>loader</code>  的执行结果会作为下一个  <code>loader</code>  的入参； <code>plugin</code>  则有同步和异步两种执行机制。</li>\n</ol>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>常用的  <code>loader</code>  和  <code>plugin</code>  有哪些？他们的作用分别是什么？</p>\n<blockquote>\n<ul>\n<li>loader： <code>css-loader</code> 、 <code>style-loader</code> 、 <code>less-loader</code> 、 <code>sass-loader</code> 、 <code>jsx-loader</code> 、 <code>image-loader</code> 、 <code>thread-loader</code></li>\n<li>plugin:  <code>html-webpack-plugin</code> 、 <code>mini-css-extract-plugin</code> 、 <code>copy-webpack-plugin</code> 、 <code>happypack</code> 、 <code>commons-chunk-plugin</code> 、 <code>hot-module-replacement-plugin</code></li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>描述  <code>Webpack</code>  的 <code>热更新</code> 原理</p>\n<blockquote>\n<blockquote>\n<p>webpack 的热更新是由  <code>hot-module-replacement-plugin</code>  提供能力，在 webpackV5 时内置为 module.hot 上；</p>\n</blockquote>\n<ol>\n<li><code>HMR</code>  提供了  <code>HMR Server</code>  和  <code>HMR runtime</code>  两个部分；</li>\n<li><code>HMR Server</code>  部分是  <code>webpack-dev-middleware</code>  开发服务器的中间件。通过监听  <code>webpack</code>  的  <code>compiler done</code>  将编译后的模块新 hash 通过  <code>websocket</code>  发送给浏览器的  <code>HMR runtime</code>  部分进行 hash 比较后，若不一致则通过模块新 hash 请求  <code>manifest</code>  文件确认模块变更的范围列表，再请求对应的 <code>[hash].hot-update.js</code> ，再进行替换和执行；</li>\n<li><code>HMR runtime</code>  会执行  <code>module.hot.accept</code>  的回调函数进行热替换，所以在需要热替换的 JS 需要手动添加  <code>module.hot.accept</code>  逻辑。通常只需要在应用入口进行添加就够用了。对于样式文件，在 loader 中已经添加了  <code>module.hot.accept</code>  逻辑，所以只需添加相应的 loader 也会开启热替换的功能；</li>\n<li>如果在模块替换或者执行的时候出现了意外，就会用 reload 兜底，刷新整个页面</li>\n</ol>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>什么是 <code>联邦模块</code> ？</p>\n</li>\n</ol>\n<h2 id=\"vite\"><a class=\"markdownIt-Anchor\" href=\"#vite\">#</a> Vite</h2>\n<ol>\n<li class=\"quiz fill\">\n<p><code>Vite</code>  是什么？</p>\n</li>\n<li class=\"quiz fill\">\n<p><code>Vite</code>  的核心原理</p>\n</li>\n<li class=\"quiz fill\">\n<p><code>Vite</code>  对比  <code>Webpack</code>  的优点和缺点</p>\n</li>\n<li class=\"quiz fill\">\n<p><code>Vite</code>  能输出什么格式的代码</p>\n</li>\n</ol>\n<h2 id=\"rollup\"><a class=\"markdownIt-Anchor\" href=\"#rollup\">#</a> Rollup</h2>\n<ol>\n<li class=\"quiz fill\">\n<p><code>Rollup</code>  是什么？</p>\n</li>\n<li class=\"quiz fill\">\n<p><code>Rollup</code>  的打包流程</p>\n</li>\n<li class=\"quiz fill\">\n<p><code>Rollup</code>  的插件机制</p>\n</li>\n<li class=\"quiz fill\">\n<p><code>Rollup</code>  常用的插件</p>\n</li>\n</ol>\n<h2 id=\"微前端\"><a class=\"markdownIt-Anchor\" href=\"#微前端\">#</a> 微前端</h2>\n<ol>\n<li class=\"quiz fill\">\n<p><code>JS 沙箱</code>  的实现方式有几种，原理是？</p>\n<blockquote>\n<ol>\n<li>iframe  <code>sandbox</code> ,  <code>contentWindow</code>  天然沙箱，iframe 必须同域才能够使用 contentWindow 属性</li>\n<li>with + new Function 代理沙箱</li>\n<li>快照沙箱，在运行时将 window 对象进行一个快照拷贝，将 window 上所有的属性复制到快照对象上，当子应用卸载时，将当前 window 对象与快照对象进行 diff ，将变更的属性使用 map 保存起来，便于下一次挂载时再次进行还原。通过  <code>Proxy</code>  也能够监听到属性修改，用  <code>Proxy</code>  实现的也叫代理沙箱；</li>\n</ol>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>CSS  <code>样式隔离</code>  的实现方式以及原理？</p>\n<blockquote>\n<ol>\n<li>没有开启  <code>shadowDOM</code>  模式下， <code>micro-app</code>  默认会为每一个样式加上  <code>micro-app[name=xxx]</code>  的前缀作为样式隔离；</li>\n<li>可以在  <code>microApp.start()</code>  中配置全局禁用，也可以在  <code>micro-app</code>  的  <code>disableScopecss</code>  属性进行单个应用的禁用。在样式文件中可以通过添加注释  <code>! scopecss-disable</code>  来禁用单个样式的隔离。</li>\n<li>开启  <code>shadowDOM</code>  模式后样式将不进行隔离处理，因为  <code>shadowDOM</code>  天然隔离样式。</li>\n</ol>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>micro-app</code>  元素隔离原理</p>\n<blockquote>\n<ol>\n<li><code>micro-app</code>  是通过修改  <code>document</code>  原型链上的  <code>querySelector</code>  实现的元素隔离，当子应用调用时，会存在  <code>appName</code> ，则会调用子应用的  <code>querySelector</code> ，当主应用访问  <code>document</code>  的属性时，通过拦截将  <code>appName</code>  置空，从而访问到原始的  <code>querySelector</code></li>\n<li>基座应用是可以访问到子应用的元素的，基座应用在没有开启  <code>shadowDOM</code>  模式下可以访问到所有的元素；</li>\n<li>在子应用卸载时，元素隔离的解除是异步的，可能会造成渲染异常，可以通过手动调用  <code>window.removeDomScope()</code>  来解除元素的绑定。</li>\n</ol>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>微前端中应用间的通讯方式</p>\n<blockquote>\n<ol>\n<li>通过基座应用的  <code>state</code>  变化，传递  <code>props</code>  来更新子应用；</li>\n<li>通过 <code>发布-订阅</code> 模式，通过事件订阅来通讯；</li>\n<li><code>MessageChannel</code></li>\n</ol>\n</blockquote>\n</li>\n</ol>\n",
            "tags": [
                "面试"
            ]
        },
        {
            "id": "https://v-immor.github.io/v-blog/posts/50daec4.html",
            "url": "https://v-immor.github.io/v-blog/posts/50daec4.html",
            "title": "网络",
            "date_published": "2023-02-24T02:13:13.000Z",
            "content_html": "<h2 id=\"网络基础\"><a class=\"markdownIt-Anchor\" href=\"#网络基础\">#</a> 网络基础</h2>\n<ol start=\"0\">\n<li class=\"quiz fill\">\n<p>介绍一下  <code>七层网络模型</code>  和  <code>TCP/IP 四层概念模型</code> </p>\n<blockquote>\n<ul>\n<li>七层网络模型<br>\n <code>应用层</code>  -&gt;  <code>表示层</code>  -&gt;  <code>会话层</code>  -&gt;  <code>传输层</code>  -&gt;  <code>网络层</code>  -&gt;  <code>数据链路层</code>  -&gt;  <code>物理层</code></li>\n<li>TCP/IP 概念模型<br>\n <code>应用层</code>  -&gt;  <code>传输层</code>  -&gt;  <code>网络层</code>  -&gt;  <code>数据链路层</code></li>\n<li>各层的代表协议<br>\n应用层：<strong>HTTP、FTP、SMTP</strong> -&gt; 为网络应用提供服务<br>\n表示层：<strong>Telnet、SNMP</strong> -&gt; 数据格式化、加解密<br>\n会话层：<strong>SMTP、DNS</strong> -&gt; 建立 / 维护 / 管理会话连接<br>\n传输层：<strong>TCP、UDP</strong> -&gt; 建立 / 维护 / 管理端到端的连接<br>\n网络层：<strong>IP、ICMP、ARP</strong> -&gt; IP 寻址、路由选择<br>\n数据链路层：<strong>PPP、PDN</strong> -&gt; 控制网络层和物理层之间的通讯<br>\n物理层：<strong>IEEE 802.1A</strong> -&gt; 比特率传输协议</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>HTTP</code>  是什么？</p>\n<blockquote>\n<ul>\n<li>\n<p><code>HTTP</code>  是为了让客户端能够理解和呈现服务端发送的超文本内容，基于  <code>TCP/IP</code>  协议的应用层协议 <code>超文本传输协议</code> 。</p>\n</li>\n<li>\n<p><code>HTTP</code>  具有 <code>无状态</code> 、 <code>明文传输</code> 、 <code>报文灵活可扩展</code> 、 <code>可靠传输</code> 等特点。</p>\n</li>\n<li>\n<p><code>HTTP</code>  有一些缺陷：</p>\n<ol>\n<li><code>明文传输</code> 的特点导致 <code>数据传输的安全性欠缺</code> ；</li>\n<li>当使用  <code>HTTP/1</code>  时，一个 <strong>TCP 连接</strong> 同时只能处理一条请求，当前请求耗时过长会导致 <code>队头堵塞</code> 的问题；</li>\n<li>在需要保存上下文信息时， <code>无状态</code> 的特性会让网络开销增加；</li>\n</ol>\n</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>HTTP</code>  的组成部分有哪些？它的报文结构是怎样的？</p>\n<blockquote>\n<ul>\n<li><code>请求报文</code> 的组成部分 -&gt;  <code>状态行</code>  +  <code>请求头</code>  +  <code>消息主体</code></li>\n<li><code>响应报文</code> 的组成部分 -&gt;  <code>状态行</code>  +  <code>响应头</code>  +  <code>响应正文</code></li>\n<li><code>报文结构</code>\n<blockquote>\n<p>起始行 + 头部 + 空行 + 实体<br>\n请求报文的起始行：  <code>Method</code>  +  <code>Path</code>  +  <code>Version</code> <br>\n 响应报文的起始行：  <code>Version</code>  +  <code>Status</code>  +  <code>Status Content</code></p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>HTTP</code>  各个版本（1.0、1.1、2.0、3.0）的区别</p>\n<blockquote>\n<ul>\n<li>HTTP/1.0:<br>\n<strong> 特点：</strong>\n<ol>\n<li>引入  <code>if-Modified-since</code>  和  <code>expires</code>  作为缓存；</li>\n<li>引入了  <code>POST</code>  和  <code>HEAD</code>  请求；</li>\n<li>引入了长连接（keep-alive），可以有序的发起多个请求，但新的请求需要等待上一个请求响应才会发起，所以默认是关闭的；</li>\n</ol>\n</li>\n<li>HTTP/1.1:<br>\n<strong> 特点：</strong>\n<ol>\n<li>默认开启长连接，引入了 <code>管道机制</code> 可在一个 TCP 连接中同时发出多个请求，但响应依旧是有序响应，所以会有 <code>队头阻塞</code> 的问题；</li>\n<li>新增了请求方法： <code>PUT</code> 、 <code>DELETE</code> 、 <code>PATCH</code> 、 <code>OPTIONS</code> ;</li>\n<li>通过  <code>Range</code>  属性实现断点续传；</li>\n<li>新增了缓存机制的失效控制字段： <code>E-tag</code> 、 <code>if-Match</code> 、 <code>if-None-Match</code></li>\n</ol>\n</li>\n<li>HTTP/2.0<br>\n<strong> 特点：</strong>\n<ol>\n<li>引入了 <code>二进制分帧</code> 来处理 header 和数据；</li>\n<li>对 header 进行压缩，解决头部偏重的问题；</li>\n<li><code>多路复用</code> ，可以在一个 TCP 连接里，同时发起多个请求，并且可以不需要要有序响应，解决了 <code>队头阻塞</code> 的问题；</li>\n<li><code>服务器推送</code> ，服务器可以主动推送资源给客服端；</li>\n<li><code>请求优先级</code> ，可以设置数据帧的优先级，让服务端优先处理响应；</li>\n</ol>\n</li>\n<li>HTTP/3.0（QUIC）<br>\n<strong>特点：</strong>\n<ol>\n<li>使用 UDP 替换 TCP 建立连接；</li>\n<li>使用了  <code>TLS1.3</code>  保证通讯的安全；</li>\n</ol>\n</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>HTTP</code>  有哪些请求方法？</p>\n<blockquote>\n<p><code>GET</code> 、 <code>POST</code> 、 <code>PUT</code> 、 <code>DELETE</code> 、 <code>OPTIONS</code> 、 <code>HEAD</code> 、 <code>CONNECT</code> 、 <code>PATCH</code> 、 <code>TRACE</code></p>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>GET</code>  和  <code>POST</code>  的区别</p>\n<blockquote>\n<ol>\n<li><code>GET</code>  会被浏览器主动缓存下来， <code>POST</code>  不会。</li>\n<li><code>GET</code>  的参数默认通过 URL 传参，并且会进行  <code>URL</code>  编码， <code>POST</code>  还可以在  <code>Body</code>  中进行传参，body 传参没有编码限制。</li>\n<li><code>GET</code>  常用于获取数据，请求是 <code>幂等</code> 的， <code>POST</code>  常用于数据操作，默认没有 <code>幂等性</code></li>\n<li><code>GET</code>  请求是一次性将报文都发送出去， <code>POST</code>  会先把  <code>header</code>  部分发出去，如果服务端响应了 100 状态才会把  <code>body</code>  部分发送出去。</li>\n</ol>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>HTTP</code>  有哪些状态码？</p>\n<blockquote>\n<ul>\n<li>1xx：  <code>100</code>  -&gt; 服务端已收到请求，请继续发送后续请求；</li>\n<li>2xx：  <code>200</code>  -&gt; 成功响应请求，响应报文中会含有 body 部分； <code>204</code>  -&gt; 成功响应请求，但没有 body； <code>206</code>  -&gt; 响应成功，但返回内容仅是一部分，常用于分块下载、断点续传。</li>\n<li>3xx：  <code>301</code>  -&gt; 资源永久重定向到新地址； <code>302</code>  -&gt; 资源暂时重定向到新地址； <code>304</code>  -&gt; 资源未修改，重定向到缓存地址 ( <code>协商缓存</code> )</li>\n<li>4xx：  <code>400</code>  -&gt; 请求报文有错误； <code>401</code>  -&gt; 没有权限访问该资源； <code>403</code>  -&gt; 没有权限访问该资源，但资源是存在的； <code>404</code>  -&gt; 请求的资源不存在；</li>\n<li>5xx： <code>500</code>  -&gt; 笼统的服务端错误，没有具体指明； <code>501</code>  -&gt; 客服端请求的功能还不支持； <code>502</code>  -&gt; 网关挂了，服务可能是正常的； <code>503</code>  -&gt; 服务器正忙，无法响应；</li>\n<li>更多…</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>HTTP/2</code>  的 <code>多路复用</code> 和  <code>HTTP/1.1</code>  的  <code>keep-alive</code>  的区别</p>\n<blockquote>\n<ol>\n<li><code>多路复用</code>  指的是一个 TCP 连接下可以同时发起多个请求，并且不需要有序响应，不会阻塞请求的响应；</li>\n<li><code>keep-alive</code>  仅是让 TCP 不断开，虽然可以同时发起多个请求，但是请求的响应会有序，会造成阻塞；</li>\n</ol>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>HTTPS</code>  是什么</p>\n<blockquote>\n<ul>\n<li><code>HTTPS</code>  是基于  <code>HTTP</code>  协议上套的一层  <code>TLS</code>  协议，用于服务器的身份认证，让 <code>HTTP</code>  更加安全。</li>\n<li><code>HTTPS</code>  主要解决了 <code>服务器的身份认证</code> 、 <code>明文传输</code> 等问题。</li>\n<li><code>HTTPS</code>  具有以下特点：\n<ol>\n<li>可以让内容加密，避免中间服务器查看；</li>\n<li>通过  <code>HTTPS</code>  证书，验证用户访问的是否正确的服务器，避免被第三方  <code>DNS</code>  劫持到其他服务器；</li>\n</ol>\n</li>\n<li><code>TLS</code>  采用的是混合加密方式，先使用 <code>非对称加密</code> 方式建立起通信连接，通过 <code>对称加密</code> 的方式进行消息加密</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>HTTPS</code>  的握手过程</p>\n<blockquote>\n<ul>\n<li>握手可以分为五个阶段</li>\n</ul>\n<ol>\n<li>由客户端传递 <code>协议版本号</code> 、一个 <code>随机数</code> 、 <code>支持的加密方法</code> ；</li>\n<li>由服务端确认使用何种 <code>加密方法</code> ，并将 <code>数字证书</code> 、服务端产生的 <code>随机数</code> 传递给客户端；</li>\n<li>客户端确认证书有效后，生成一个 <code>新的随机数</code> 、并使用数字证书中的 <code>公钥</code> 对这个随机数进行加密后传递给服务端；</li>\n<li>服务端使用私钥解密获得随机数，用三个随机数进行计算生成本次会话所需的 <code>会话秘钥</code> ，将协商的加密方法和秘钥发送给客户端、并通知握手结束通知；</li>\n<li>进入会话阶段，通过 <code>会话秘钥</code> 加密全部对话过程；</li>\n</ol>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>HTTPS</code>  的握手过程中，客户端如何验证证书的合法性</p>\n</li>\n<li class=\"quiz fill\">\n<p><code>TLS</code>  是什么？</p>\n</li>\n<li class=\"quiz fill\">\n<p>介绍一下  <code>HTTPS</code>  的中间人攻击</p>\n</li>\n<li class=\"quiz fill\">\n<p><code>TCP</code>  和  <code>UDP</code>  的区别？</p>\n</li>\n<li class=\"quiz fill\">\n<p><code>TCP</code>  的三次握手和四次挥手</p>\n</li>\n<li class=\"quiz\">\n<p>A、B 机器正常连接后，B 机器突然重启，问 A 此时 处于 TCP 什么状态？</p>\n<ul class=\"options\">\n<li class=\"correct\">SYN_SENT</li>\n<li>SYN_RCVD</li>\n<li>ESTABLISHED</li>\n<li>FIN_WAIT1</li>\n<li>CLOSE_WAIT</li>\n</ul>\n</li>\n<li class=\"quiz fill\">\n<p><code>HTTP/3</code>  为什么基于 UDP 实现？如何解决 UDP 的弊端</p>\n</li>\n<li class=\"quiz fill\">\n<p><code>HTTP 状态码</code>  有哪些以及对应的含义</p>\n</li>\n<li class=\"quiz fill\">\n<p><code>DNS</code>  的解析原理</p>\n</li>\n<li class=\"quiz fill\">\n<p><code>Cookie</code>  是什么？</p>\n</li>\n<li class=\"quiz fill\">\n<p><code>Cookie</code>  和  <code>Session</code> ，以及和  <code>Storage</code>  的区别？</p>\n</li>\n<li class=\"quiz fill\">\n<p><code>跨域</code>  是什么？如何解决跨域</p>\n</li>\n<li class=\"quiz fill\">\n<p>什么是  <code>CSRF</code>  攻击，如何防范？</p>\n</li>\n<li class=\"quiz fill\">\n<p>什么是 <code>预请求</code> ？</p>\n</li>\n</ol>\n<h2 id=\"浏览器\"><a class=\"markdownIt-Anchor\" href=\"#浏览器\">#</a> 浏览器</h2>\n<ol>\n<li class=\"quiz fill\">\n<p>描述从输入 URL 到页面显示的过程</p>\n</li>\n<li class=\"quiz fill\">\n<p>浏览器有几个进程？ 分别的作用是？</p>\n<blockquote>\n<ol>\n<li>渲染进程 n</li>\n</ol>\n<ul>\n<li>GUI 渲染线程：负责渲染页面 ( <code>解析 HTML</code>  -&gt;  <code>构建 DOM 树</code>  -&gt;  <code>CSSOM 树构建</code>  -&gt;  <code>合成 Render 树</code>  -&gt; 布局、绘制)。 <code>GUI 渲染进程</code>  和  <code>JS 引擎线程</code> 是互斥的，JS 代码执行会阻塞页面的渲染；</li>\n<li>JS 引擎线程：等待任务队列的进入，负责解析 JS 代码，JS 的执行；与  <code>GUI 渲染线程</code>  互斥，会在异步宏任务之间询问是否需要调用  <code>GUI 渲染线程</code> ；</li>\n<li>计时器线程： <code>setTimeout</code>  和  <code>setInterval</code>  计时的线程，计时结束后会将回调任务通过 <code>事件触发线程</code> 放入任务队列，等待  <code>JS 引擎线程</code> 调用；</li>\n<li>事件触发线程：负责维护事件任务队列；</li>\n<li>HTTP 请求线程：负责发起请求，若有回调任务则会通过 <code>事件触发线程</code> 加入到任务队列中，等待执行；</li>\n</ul>\n<ol start=\"2\">\n<li>GPU 进程 1</li>\n<li>网络进程 1</li>\n<li>插件进程 n</li>\n<li>浏览器进程 1</li>\n</ol>\n<ul>\n<li>浏览器的界面显示，管理页签、管理进程，将页面内容写入内存，渲染图像，文件存储；</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>浏览器的渲染进程里，有什么线程？</p>\n</li>\n<li class=\"quiz fill\">\n<p>浏览器一帧内做了什么</p>\n<blockquote>\n<ul>\n<li>主线程的一帧：</li>\n<li>-&gt;  <code>Input Event</code>  -&gt;  <code>JS Task</code>  -&gt;  <code>Begin Frame</code>  -&gt;  <code>RAF</code>  -&gt;  <code>Layout</code>  -&gt;  <code>Paint</code>  -&gt;  <code>RIC</code>  -&gt;</li>\n<li><code>Input Event</code> ：用户输入事件</li>\n<li><code>JS Task</code> ：同步代码</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>描述一下浏览器的事件机制</p>\n</li>\n<li class=\"quiz fill\">\n<p>浏览器存储数据的方式有哪些</p>\n</li>\n<li class=\"quiz\" fill=\"\">\n<p>service worker 是什么</p>\n</li>\n<li class=\"quiz fill\">\n<p><code>Web Worker</code>  是什么？</p>\n</li>\n<li class=\"quiz fill\">\n<p><code>MessageChannel</code>  和  <code>window.postMessage</code> </p>\n<blockquote>\n<ul>\n<li>MessageChannel 是主线程异步执行，Window.postMessage 是 web Worker 进程</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>如何进行跨页签通信？</p>\n<blockquote>\n<ul>\n<li><code>Web Worker</code> : window.postMessage</li>\n<li><code>MessageChannel</code></li>\n<li><code>webSocket</code> ：借助服务器</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n",
            "tags": [
                "面试"
            ]
        },
        {
            "id": "https://v-immor.github.io/v-blog/posts/4a322b5b.html",
            "url": "https://v-immor.github.io/v-blog/posts/4a322b5b.html",
            "title": "React",
            "date_published": "2023-02-23T22:07:00.000Z",
            "content_html": "<h2 id=\"react-原理\"><a class=\"markdownIt-Anchor\" href=\"#react-原理\">#</a> React 原理</h2>\n<ol>\n<li class=\"quiz fill\">\n<p><code>React</code>  是什么？</p>\n<blockquote>\n<ol>\n<li><code>React</code>  是一个构建用户界面的 JS 库，具有 <code>声明式编程</code> 、 <code>组件化</code> 、 <code>跨平台</code> 的特点。</li>\n<li>声明式编程可以让开发者降低操作 DOM 的负担，组件化利于视图层的开发复用。</li>\n<li><code>React</code>  通过  <code>虚拟 DOM</code>  来描述真实 DOM 的结构，所以  <code>React</code>  具有跨平台的能力。</li>\n</ol>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>React</code>  的生命周期</p>\n<blockquote>\n<ul>\n<li><code>construtor</code>  -&gt;  <code>getDerivedStateFromProps</code>  -&gt;  <code>shouldComponentUpdate</code>  -&gt;  <code>render</code>  -&gt;  <code>getSnapshotBeforeUpdate</code>  -&gt;  <code>componentDidMount</code>  -&gt;  <code>componentDidUpdate</code>  -&gt;  <code>componentWillUnMount</code></li>\n<li>挂载时： <code>construtor</code>  -&gt;  <code>getDerivedStateFromProps</code>  -&gt;  <code>render</code>  -&gt;  <code>componentDidMount</code></li>\n<li>更新时： <code>getDerivedStateFromProps</code>  -&gt;  <code>shouldComponentUpdate</code>  -&gt;  <code>render</code>  -&gt;  <code>getSnapshotBeforeUpdate</code>  -&gt;  <code>componentDidUpdate</code></li>\n<li>卸载时： <code>componentWillUnMount</code></li>\n<li>从整个运行阶段来看，可分为  <code>Render</code>  阶段和  <code>Commit</code>  阶段</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>react</code>  和  <code>react-dom</code>  的区别</p>\n<blockquote>\n<p><code>react</code>  包中主要是导出应用开发所需要的函数， <code>react-dom</code>  是  <code>react</code>  的 web 平台的渲染器，正常应用开发只需要导入  <code>render</code>  函数即可</p>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>描述一下  <code>React 的 Fiber 架构</code> </p>\n<blockquote>\n<ul>\n<li><code>Fiber 架构</code> 是 React 团队主要是为了解决旧架构中同步更新不可中断导致阻塞渲染进程的问题提出的架构，它主要是重构 React 架构中的  <code>Reconcile</code>  层，并且增加了  <code>Schedule</code>  层来做任务的调度。</li>\n<li>在 Fiber 的运行机制里，Fiber 能够让 React 将同步更新中断，把主线程的控制权交回给浏览器控制，从而达到不阻塞浏览器渲染的目的；<br>\nReact 中的 Fiber 是一个 <code>多环的链表结构</code> ，链表的结构让 Fiber 在遍历中实现中断和恢复，通过 <code>子节点</code> 、 <code>父节点</code> 、 <code>同级节点</code> 的三个指针，来描述 DOM 的树结构。</li>\n<li>从 React 的运行逻辑来看，React 大体可以分为两个阶段： 1. 进行  <code>DIFF</code> ， <code>任务调度</code> 的  <code>Render</code>  阶段。 2. 将  <code>Render</code>  阶段产出的  <code>Fiber</code>  渲染到页面的  <code>Commit</code>  阶段。</li>\n<li>在 <strong>Render</strong> 阶段又分成  <code>Reconcile</code>  协调部分和  <code>Schedule</code>  任务调度部分。</li>\n</ul>\n<ul>\n<li><code>Reconcile</code>  主要是将 JSX 产出的 DOM 结构和当前 Fiber 结构进行深度优先遍历，判断是否要新增、删除、移动节点，并打上对应的操作标记  <code>effectTag</code> 。</li>\n<li><code>Schedule</code>  则是用来控制主线程让出机制的。通过判断在一帧中还剩余的时间是否足够执行一个宏任务，来决定是否进入到下一个更新工作或者让出主线程，等待主线程的下一次的空闲。\n<blockquote>\n<p>当有 Fiber 发生更新时， <code>Reconcile</code>  和  <code>Schedule</code>  会穿插执行， <code>Reconcile</code>  每一次循环前会通过  <code>Schedule</code>  的  <code>shouldYield()</code>  函数判断剩余时间是否足够执行任务，若足够就继续进行遍历工作，若不够就让出主线程进入下一个事件循环有足够时间时再执行任务。</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><strong>Commit</strong> 阶段主要的工作是将  <code>Render</code>  产出的有  <code>effectTag</code>  标记的 Fiber 根据不同的操作标记执行不同的 DOM 操作，并将 Fiber 上的所有的 <code>副作用函数</code> 进行处理。</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>描述一下  <code>React Diff</code>  的原理</p>\n<blockquote>\n<ul>\n<li>React 的 Diff 使用深度优先遍历算法，从上到下，从左到右进行递归遍历找出可复用的节点。</li>\n<li>和原本的 Diff 算法不同的地方是，React 设定了三种限制，将 Diff 算法的复杂度从  <code>O(n^3)</code>  降低至  <code>O(n)</code>  。</li>\n<li>这三种限制分别是\n<ol>\n<li>只对同级元素进行遍历，如果元素发生了跨级变动，则不会复用该元素。</li>\n<li>如果元素的类型发生变化，则直接销毁当前元素及其子孙元素，并新建元素及子孙元素。</li>\n<li>开发者可以通过 Key 让元素在渲染的时候保持稳定复用。</li>\n</ol>\n</li>\n<li>根据上面三种限制，React 会对 JSX 语法产生的 DOM 结构和当前渲染的 Fiber 结构经过两次遍历来完成  <code>fiber</code>  的更新。</li>\n<li>遍历的逻辑\n<ol>\n<li>一一对比  <code>vdom</code>  和  <code>fiber</code> ，如果可以复用则处理下一个节点的对比，否则结束遍历。\n<ul>\n<li>如果所有的  <code>vdom</code>  遍历完了，那就把  <code>fiber</code>  剩余的节点删掉。</li>\n<li>如果  <code>vdom</code>  有剩余，那就进行第二次遍历。</li>\n</ul>\n</li>\n<li>第二次遍历就是将剩余的  <code>fiber</code>  放到  <code>map</code>  里，继续遍历剩下的  <code>vdom</code> 。\n<ul>\n<li>如果可以复用就进行移动</li>\n<li>第二次遍历完后，将剩余的  <code>vdom</code>  进行新增、将剩余的  <code>fiber</code>  进行删除。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>React 的 <code>合成事件</code> 是什么？</p>\n<blockquote>\n<ul>\n<li><code>React 合成事件</code>  是 React 为了抹平各平台 <code>事件 API</code>  的差异，根据 W3C 的 <code>事件机制规范</code> 实现的抽象跨平台事件机制。</li>\n<li>除了能够磨平不同平台的差异达到跨平台的能力外，还能够通过事件委托机制优化了内存开销，并且能够干预事件的分发来提升用户的体验。</li>\n<li>它和原生事件不同的主要区别是\n<ol>\n<li>命名方式不同，原生事件是全小写，合成事件是小驼峰</li>\n<li>原生事件可以指定绑定在具体元素上，合成事件是统一绑定在  <code>Root 元素</code>  上，在具体执行时才进行派发执行。</li>\n<li>原生事件组织冒泡的形式可以通过  <code>e.stopPropogation()</code>  或者  <code>return false</code> ，合成事件只能通过  <code>e.stopPropogation()</code></li>\n</ol>\n</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>React</code>  什么时候挂载的合成事件</p>\n</li>\n<li class=\"quiz fill\">\n<p><code>React V17</code>  中为什么要移除事件池？</p>\n<blockquote>\n<ul>\n<li>在旧版中， <code>事件池</code> 是为了复用不同事件的事件对象，用来提升性能，并且在所有的事件对象在真正使用前都置为  <code>null</code> ，所以在旧版中，要在异步任务里访问到正确的事件对象就必须先执行  <code>e.persist()</code> 。</li>\n<li>在 17 的版本里，删除了事件池的优化操作，开发者就可以按照预期访问到正确的事件对象。</li>\n<li>为了保持兼容，17 版本的  <code>e.persist()</code>  也可以继续使用，不过没有效果而已。</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>多次调用  <code>click</code>  事件，在 document 上事件监听会执行几次？</p>\n<blockquote>\n<ul>\n<li>执行一次。因为 React 在注册监听函数不是单一的回调函数，而是  <code>dispatchEvent</code>  分发函数，所以即使是调用了多次也只会注册一次监听函数</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>React 的合成事件主要做了什么？</p>\n<blockquote>\n<ol>\n<li>事件绑定（注册、监听）</li>\n<li>事件触发（合成、分发）</li>\n</ol>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>React Hooks 的原理</p>\n<blockquote>\n<ul>\n<li>hooks 是 React 为了使函数组件也能够使用 React 的 state 或其他特性而设计的 <code>钩子函数</code> 。</li>\n<li>hook 在 Fiber 中存放于  <code>memoizedState</code>  属性中，是一个链表结构，通过  <code>next</code>  指针指向下一个 hook。</li>\n<li>如果  <code>memoizedState</code>  发生变化，会创建一个  <code>Update</code>  对象到  <code>updateQueue</code>  里。</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>React 是如何处理副作用的</p>\n</li>\n<li class=\"quiz fill\">\n<p>React  <code>class 组件</code>  和  <code>Hook 组件</code>  的区别</p>\n<blockquote>\n<ul>\n<li>从语法来看， <code>class</code>  需要继承  <code>React.Component</code> ， <code>Hook</code>  则不需要。</li>\n<li>从代码执行角度来看， <code>class</code>  的运行逻辑没有  <code>Hook</code>  清晰， <code>class</code>  通过生命周期钩子实现，需要了解生命周期钩子的作用及含义，还需要关注  <code>this</code>  指针问题。 <code>Hook</code>  则是纯函数实现方式，不需要关注生命周期的执行，不需要考虑  <code>this</code> 。</li>\n<li>从  <code>React</code>  的设计理念来看， <code>Hook</code>  更加符合  <code>UI=Fn(data)</code>  的理念。</li>\n<li>从  <code>React</code>  运行逻辑来看， <code>class</code>  需要进行实例化， <code>Hook</code>  运行完便可回收。 <code>Hook</code>  在内存上会更加节省一些。</li>\n<li>从  <code>React</code>  的特性来看， <code>class</code>  组件使用  <code>state</code>  只需要定义在  <code>this</code>  上即可使用， <code>Hook</code>  则需要通过  <code>useState</code>  钩子来实现状态。</li>\n<li><strong>函数式组件天然可以捕获渲染时的所使用的值</strong>。</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>setState 是同步的还是异步的</p>\n<blockquote>\n<ul>\n<li>没有启用  <code>Fiber</code>  架构时，在合成事件和生命周期钩子中是异步的，在 settimeout 、原生事件中是同步的。</li>\n<li>启用  <code>Fiber</code>  架构后都是异步更新的。</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>setState 的批量更新和 useState 的批量更新如何实现</p>\n</li>\n<li class=\"quiz fill\">\n<p>React 如何更新视图？( <code>dispatch</code>  如何实现视图更新)</p>\n</li>\n<li class=\"quiz fill\">\n<p><code>useCallback</code>  和  <code>useMemo</code>  的区别</p>\n<blockquote>\n<ul>\n<li><code>useCallback</code>  和  <code>useMemo</code>  都是用于缓存的钩子，让函数和值具有稳定性。</li>\n<li>两个钩子第一个参数都是回调函数，第二个参数是一个依赖对象的数组， <code>useMemo</code>  的回调函数会在 render 函数执行时同步执行并返回值， <code>useCallback</code>  则是将回调函数进行缓存，等待调用。第二个参数就是决定回调函数是否更新的依赖对象数组，只要数组内的对象发生更新，回调函数就会更新。</li>\n<li><code>useMemo</code>  常用于缓存复杂的计算结果</li>\n<li><code>useCallback</code>  则是用于需要稳定函数的处理，比如 <code>防抖</code> 、 <code>节流</code> 的回调函数，滚动事件的监听函数。</li>\n<li><code>useMemo</code>  和  <code>useCallback</code>  都会存在闭包陷阱，若在内部使用了非依赖数组中的对象，则会无法获取最新的对象值。</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>useEffect</code>  和  <code>useLayoutEffect</code>  的区别</p>\n<blockquote>\n<ul>\n<li>执行时机不一样， <code>useLayoutEffect</code>  在 DOM 变更后 <code>同步触发</code> ， <code>useEffect</code>  在 DOM 变更前  <code>异步触发</code> 。</li>\n<li><code>useLayoutEffect</code>  同步触发会同步提交 DOM 的变化，所以在  <code>useLayoutEffect</code>  中修改状态只会触发一次  <code>render</code> ， <code>useEffect</code>  则会触发两次。</li>\n<li><code>useLayoutEffect</code>  会阻塞浏览器渲染。</li>\n<li><code>useLayoutEffect</code>  在服务端是不会执行的。</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>React 为什么要使用虚拟 DOM？虚拟 DOM 的原理？</p>\n<blockquote>\n<ul>\n<li>虚拟 DOM 就是 JS 对象，用 JS 对象去描述 DOM 的结构。</li>\n</ul>\n<ol>\n<li>为了实现跨平台能力。</li>\n<li>通过操作数据控制 UI 的渲染逻辑具有更强的表达能力，降低开发者的负担。</li>\n<li>预先在内存中找出更新的元素，再进行统一渲染可以降低频繁操作 DOM 消费。</li>\n</ol>\n<ul>\n<li>虚拟 DOM 的缺点是无法做到极致的性能优化，声明式驱动视图的更新和命令式让视图更新的中间过程还是具有一定消耗的。</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>React.lazy</code>  和  <code>Suspense</code>  的原理和实现</p>\n<blockquote>\n<ul>\n<li><code>lazy</code>  是借助  <code>import</code>  的动态加载实现的， <code>import</code>  的动态加载实现了  <code>Promise</code>  的规范。</li>\n<li><code>Suspense</code>  通过  <code>componentDidCatch</code>  来捕获  <code>lazy</code>  未加载成功时的渲染问题。</li>\n<li><code>lazy</code>  加载的组件必须使用  <code>Suspense</code>  包裹起来才能够正常使用。</li>\n</ul>\n</blockquote>\n<blockquote>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> fetcher <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    status<span class=\"token operator\">:</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    result<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    promise<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    fetcher<span class=\"token punctuation\">.</span>promise <span class=\"token operator\">=</span> promise</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fetcher<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        fetcher<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token string\">'resolve'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        fetcher<span class=\"token punctuation\">.</span>result <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>default</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fetcher<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">throw</span> fetcher</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fetcher<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token string\">'resolved'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token keyword\">return</span> fetcher<span class=\"token punctuation\">.</span>result</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Suspense</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span>PureComponent <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   * isRender 异步组件是否就绪，可以渲染</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    isRender<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token function\">componentDidCatch</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> isRender<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    event<span class=\"token punctuation\">.</span>promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token comment\">/* 数据请求后，渲染真实组件 */</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> isRender<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> fallback<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> isRender <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state</pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">return</span> isRender <span class=\"token operator\">?</span> children <span class=\"token operator\">:</span> fallback</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>React.Fragment</code>  的原理</p>\n</li>\n<li class=\"quiz fill\">\n<p><code>React</code>  如何做 <code>时间切片</code> </p>\n<blockquote>\n<ul>\n<li>判断当前循环中已经执行了多少秒，如果低于  <code>5ms</code>  就继续下一个任务，不切片，如果大于  <code>5ms</code>  则进行切片，中断任务执行；</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>useSyncExternalStore</code>  的作用及原理</p>\n</li>\n</ol>\n<h2 id=\"react-应用\"><a class=\"markdownIt-Anchor\" href=\"#react-应用\">#</a> React 应用</h2>\n<ol>\n<li class=\"quiz fill\">\n<p><code>useReducer</code>  和  <code>Redux</code>  的区别和优缺点</p>\n</li>\n<li class=\"quiz fill\">\n<p>如何解决  <code>useState</code> 、 <code>useEffect</code>  的闭包问题</p>\n</li>\n<li class=\"quiz fill\">\n<p>hook 为什么不能放在条件语句中</p>\n<blockquote>\n<ul>\n<li>因为  <code>Hooks</code>  基于链表数据结构实现的，在 React 进行遍历时，当前处理的 hook 指针是按序依次更新的，如果 hook 在条件语句中使用就会出现指针错误，找不到或找到错误的 hook 进行处理；</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"react-技术生态\"><a class=\"markdownIt-Anchor\" href=\"#react-技术生态\">#</a> React 技术生态</h2>\n<ol>\n<li class=\"quiz fill\">\n<p><code>Redux</code>  的核心概念是？</p>\n<blockquote>\n<ul>\n<li><code>Redux</code>  的本质是 <code>发布-订阅</code> 模式的实现。</li>\n<li><code>Redux</code>  的核心思想是不产生副作用，数据状态 <code>可追踪</code> 、 <code>可回溯</code> 、 <code>可预测</code> 。</li>\n<li><code>Redux</code>  的基本流程是\n<ol>\n<li>将应用的状态放到一个  <code>Store</code>  集中管理。</li>\n<li>视图层通过不同的  <code>Action</code>  触发不同  <code>Reducer</code>  函数去更新  <code>Store</code>  中对应的  <code>state</code> 。</li>\n<li>视图层通过订阅  <code>Store</code>  的变化来更新视图层。</li>\n</ol>\n</li>\n<li><code>Redux</code>  的基本原则是\n<ol>\n<li>一个应用只能有一个数据源（store 唯一）。</li>\n<li>state 只读，只能通过  <code>action</code>  对象驱动  <code>reducer</code>  来修改 state。</li>\n<li>只能通过纯函数  <code>reducer</code>  来修改 store。</li>\n</ol>\n</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>Redux</code>  中的  <code>reducer</code>  为什么必须要返回一个新的对象？</p>\n<blockquote>\n<ul>\n<li>纯函数的基本概念是 <code>相同的输入始终输出始终相同</code> ，也就是说需要做到 <code>不修改输入参数</code> 、 <code>不调用不纯的函数</code> 、 <code>不执行有副作用的操作</code> 。根据这三个原则可以解释  <code>reducer</code>  为什么需要返回一个新对象，而不是在原来的对象中进行修改。</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>Redux</code>  为什么要把  <code>reducer</code>  设计为纯函数？</p>\n<blockquote>\n<ol>\n<li><code>Redux</code>  的定位是一个 <code>可追踪</code> 、 <code>可回溯</code> 、 <code>可预测</code> 的状态管理库，如果  <code>reducer</code>  不纯，异步的任务将会破坏  <code>Redux</code>  的三个基本原则。</li>\n</ol>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>Redux</code>  如何处理副作用 / 异步任务</p>\n<blockquote>\n<ul>\n<li><code>Redux</code>  处理异步任务主要通过中间件来完成。 <code>Redux</code>  的中间件是一个 <code>洋葱模型</code> 用来增强  <code>dispatch</code>  的能力。</li>\n<li><code>Redux</code>  处理异步的整体流程是：\n<ol>\n<li>异步任务开始前，通过  <code>action</code>  通知  <code>redux</code> 。</li>\n<li>异步任务结束后，再通过  <code>action</code>  通知  <code>redux</code> 。</li>\n<li>视图层通过订阅不同的状态来更新视图。</li>\n</ol>\n</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>useSelector</code>  的原理</p>\n<blockquote>\n<ol>\n<li><code>useSelector</code>  直接订阅了  <code>store</code>  的变化，在  <code>Redux</code>  更新中， <code>store</code>  是不断变化的，但内部 state 的引用只会在相应  <code>state</code>  发生变化时才会更新，所以  <code>useSelector</code>  的第一个参数是一个筛选函数，用于订阅具体的  <code>state</code> ，仅当订阅的旧  <code>state</code>  和筛选函数返回的新  <code>state</code>  不同时才会进行触发视图的更新，第二个参数则是一个更具体的比较函数，当返回 true 才会更新，类似于  <code>shouldComponentUpdate</code>  的作用。</li>\n<li><code>useSelector</code>  的更新，早期使用  <code>forceRender</code>  实现，现在使用  <code>useSyncExternalStore</code>  实现，避免因为  <code>React</code>  自身的调度更新导致状态不一致；</li>\n</ol>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>redux-thunk</code>  和  <code>react-saga</code>  的区别</p>\n<blockquote>\n<ul>\n<li><code>thunk</code>  使用的是高阶函数的形式通过  <code>Promise</code>  来增强  <code>dispatch</code> 。</li>\n<li><code>saga</code>  则使用  <code>generator</code>  函数的形式增强  <code>dispatch</code> 。</li>\n<li>两者在写法上有较大的不同， <code>thunk</code>  会比较贴近业务开发， <code>saga</code>  的语义会更加清晰，耦合度会更加宽松，但写法相对比较复杂。</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>Redux</code>  和  <code>Mobx</code>  的区别是什么，使用场景</p>\n<blockquote>\n<ol>\n<li><code>Redux</code>  基于  <code>发布-订阅</code>  模式，走的是单向数据流，store 唯一，数据不可变；</li>\n<li><code>Mobx</code>  基于  <code>观察者</code>  模式，采用的是双向数据流，store 可以多个，数据是可变的；</li>\n<li><code>Redux</code>  需要手动追踪数据的变化，也能对数据变化进行追踪和追溯， <code>Mobx</code>  则只需对数据变化进行观察，在变化时触发监听，数据变化不好追溯；</li>\n<li><code>Redux</code>  处理异步时，需要借助中间件增强  <code>Action</code> ， <code>Mobx</code>  则天然可支持异步处理；</li>\n</ol>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>原子状态库的原理是什么？</p>\n</li>\n<li class=\"quiz fill\">\n<p>原子类状态库和  <code>Redux</code> 、 <code>Mobx</code>  等状态库有什么区别</p>\n<blockquote>\n<ol>\n<li>原子类状态库和  <code>Redux</code>  的核心原理都是  <code>发布-订阅</code>  模式， <code>Mobx</code>  则采用 <code>观察者</code> 模式实现；</li>\n<li>原子类状态库的基本理念是细粒度更新、扁平化分散管理、可追溯， <code>Redux</code>  的基本理念是单向数据流、集中管理、可追溯， <code>Mobx</code>  的基本理念是衍生、响应式、可观察；</li>\n</ol>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>React-Query</code>  的原理是什么？</p>\n<blockquote>\n<blockquote>\n<p><code>React-Query</code>  是一个以  <code>hook</code>  的方式管理请求的请求管理库（Server State）。</p>\n</blockquote>\n<ol>\n<li><code>React-Query</code>  的本质是一个外部的状态管理器，类似于  <code>Redux</code> 、 <code>Mobx</code> ，不同的是它集成了与服务端请求的状态处理，并提供给开发者使用；</li>\n<li><code>React-Query</code>  使用了 <code>观察者</code> 模式去桥接  <code>React</code>  和状态库的数据变化  <code>useState(() =&gt; new Observer(queryClient, options))</code> ；</li>\n<li><code>React-Query</code>  通过  <code>cache</code>  的变化通知订阅者执行回调来进行更新，在 v3 版本使用的是 forceUpDate 强制更新，v4 使用  <code>useSyncExternalStore</code>  来订阅  <code>Observer</code>  的变化</li>\n</ol>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>什么是 <code>状态持久化</code> （数据持久化）？</p>\n</li>\n<li class=\"quiz fill\">\n<p><code>React SSR</code>  的原理？</p>\n<blockquote>\n<ol>\n<li>在服务端调用  <code>renderString</code>  将组件和数据输出为  <code>HTML</code>  字符串，将这部分视图先交给浏览器进行渲染。</li>\n<li>在服务端通过在全局变量挂载服务端发生的状态变化，在客户端进行  <code>hydrate - 水合</code> 后更新页面，让客户端和服务端的状态保持一致。</li>\n</ol>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p><code>React-Route</code>  的原理？</p>\n</li>\n<li class=\"quiz fill\">\n<p><code>Taro2</code>  的原理？</p>\n</li>\n<li class=\"quiz fill\">\n<p><code>Taro3</code>  的原理？</p>\n</li>\n</ol>\n<h2 id=\"对比其他框架\"><a class=\"markdownIt-Anchor\" href=\"#对比其他框架\">#</a> 对比其他框架</h2>\n<ol>\n<li class=\"quiz fill\">\n<p><code>Vue Diff</code>  和  <code>React Diff</code>  有什么不同？</p>\n<blockquote>\n<ul>\n<li>Vue 的 Diff 采用的是双端 Diff，通过双端四次比较来确定节点是否可复用。</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>为什么没有  <code>Vue Fiber</code> ？</p>\n</li>\n<li class=\"quiz fill\">\n<p><code>React</code>  和  <code>Vue</code>  的区别</p>\n</li>\n</ol>\n",
            "tags": [
                "面试"
            ]
        }
    ]
}