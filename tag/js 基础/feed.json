{
    "version": "https://jsonfeed.org/version/1",
    "title": "开发随笔 • All posts by \"js 基础\" tag",
    "description": "~虚拟建设者~",
    "home_page_url": "https://v-immor.github.io/v-blog",
    "items": [
        {
            "id": "https://v-immor.github.io/v-blog/posts/5c1a1e7b.html",
            "url": "https://v-immor.github.io/v-blog/posts/5c1a1e7b.html",
            "title": "JS 中的继承",
            "date_published": "2022-12-07T21:42:00.000Z",
            "content_html": "<blockquote>\n<p>参考：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21xeXFpbmdmZW5nL0Jsb2cvaXNzdWVzLzE2\">https://github.com/mqyqingfeng/Blog/issues/16</span> 冴羽的 JavaScript 深入系列《JavaScript 深入之继承的多种方式和优缺点》</li>\n<li>红宝书</li>\n</ul>\n</blockquote>\n<h4 id=\"原型链继承\"><a class=\"markdownIt-Anchor\" href=\"#原型链继承\">#</a> 原型链继承</h4>\n<blockquote>\n<p>缺点：</p>\n<ol>\n<li>引用类型会被所有子类共享</li>\n<li>子类在实例化时不能够像父类传递参数</li>\n</ol>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Kid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 直接将 Person 的实例做为 Kid 的原型</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Kid</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"借用构造函数继承\"><a class=\"markdownIt-Anchor\" href=\"#借用构造函数继承\">#</a> 借用构造函数继承</h4>\n<blockquote>\n<p>即借用了父类的构造函数为自己 “创建” 父类的属性<br>\n改进：</p>\n<ol>\n<li>避免了引用类型的属性被所有实例共享。</li>\n<li>可在子类在实例化时向父类传递参数。</li>\n</ol>\n</blockquote>\n<p>缺点：</p>\n<blockquote>\n<ol>\n<li>如需继承方法就必须在父类的构造函数中实现，否则将无法继承，也就是说方法不能够复用。</li>\n</ol>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Kid</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// 将 Person 的构造函数借过来绑定一下 Person 的属性</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">Person</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"组合继承\"><a class=\"markdownIt-Anchor\" href=\"#组合继承\">#</a> 组合继承</h4>\n<blockquote>\n<p>即将原型链继承和借用构造函数继承的组合起来使用，以达到可以继承属性也能继承方法，同时子类还能够拥有自己的属性和方法（引用类型不会在类之间共享）。<br>\n改进：</p>\n<ol>\n<li>可以继承父类的属性和方法。</li>\n<li>方法可以复用，也能拥有子类自己的方法。</li>\n<li>可以被 instanceof 和 isPrototypeof 识别</li>\n</ol>\n</blockquote>\n<p>缺点：</p>\n<blockquote>\n<ol>\n<li>重复调用了两次父类构造函数 (a. 子类构造函数内一次；b. 改变原型时实例化一次</li>\n</ol>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Kid</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">Person</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">Kid</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 重写被覆盖掉的构造函数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">Kid</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Kid</pre></td></tr></table></figure><h4 id=\"原型式继承\"><a class=\"markdownIt-Anchor\" href=\"#原型式继承\">#</a> 原型式继承</h4>\n<blockquote>\n<p>基于原有的对象创建子类，将原型指向这个对象，创建者模式。ES5 中的 Object.create 就是原型式继承。<br>\n即基于一个对象，创建一个新的对象与其保持类似。<br>\n改进 / 优点：</p>\n<ol>\n<li>快速创建一个与旧对象相似的子类，同时可以避免生成构造函数占用内存？(猜测</li>\n</ol>\n</blockquote>\n<p>缺点：</p>\n<blockquote>\n<ol>\n<li>引用类型会被所有子类共享</li>\n</ol>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">creator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Fun</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token class-name\">Fun</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> obj</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">return</span> Fun</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"寄生式继承\"><a class=\"markdownIt-Anchor\" href=\"#寄生式继承\">#</a> 寄生式继承</h4>\n<blockquote>\n<p>基于原型式继承的改进。工厂模式，创建一个用于封装继承的过程函数，在该函数内部增强对象。<br>\n改进：</p>\n<ol>\n<li>子类拥有自己的方法？</li>\n<li>只做增强，不会修改到原来的对象</li>\n</ol>\n</blockquote>\n<p>缺点：</p>\n<blockquote>\n<ol>\n<li>跟借用构造函数模式一样，每次创建对象都会创建一遍方法</li>\n</ol>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">creator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Fun</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token class-name\">Fun</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> obj</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">return</span> Fun</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">creatorChild</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">orginal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">creator</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 增强对象</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  obj<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getAge</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  \tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> obj</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"寄生组合式继承\"><a class=\"markdownIt-Anchor\" href=\"#寄生组合式继承\">#</a> 寄生组合式继承</h4>\n<blockquote>\n<p>即寄生式和组合式的再次组合。组合模式的缺点是会重复调用两次父类的构造函数。<br>\n改进思路就是当子类的原型不指向父类的实例，而直接指向父类的原型。<br>\n也是 ES6 实现的继承的方式</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">creator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Fun</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token class-name\">Fun</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> obj</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">return</span> Fun</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 这只是一个处理过程，所有不需要返回</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">prototype</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">child<span class=\"token punctuation\">,</span> parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 以父类的原型创建新的对象</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">const</span> prototype <span class=\"token operator\">=</span> <span class=\"token function\">creator</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 将构造函数指向于子类</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 改变子类的原型</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    child<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> prototype<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "JS 基础"
            ]
        },
        {
            "id": "https://v-immor.github.io/v-blog/posts/3c6f1dc0.html",
            "url": "https://v-immor.github.io/v-blog/posts/3c6f1dc0.html",
            "title": "JS 中的函数",
            "date_published": "2022-06-09T23:13:00.000Z",
            "content_html": "<h2 id=\"函数是-javascript-世界的一等公民\"><a class=\"markdownIt-Anchor\" href=\"#函数是-javascript-世界的一等公民\">#</a> 函数是 JavaScript 世界的一等公民</h2>\n<p>所谓 “一等公民” 即可以享受世界规则内任何权益，并且在与其他等级公民享受同一权益时优先级更高。那么，如何在代码中去理解 “一等公民” 呢？作为 JSer 都清楚在 JavaScript 世界存在 “变量提升” 的规则。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 这里执行将会报错：TypeError: b is not a function</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">b</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 以上代码执行时的顺序，仅仅只是执行时的模拟顺序，JS 的词法分析并不会去改变的你的代码顺序！</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token function-variable function\">b</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>辟谣：</p>\n<ol>\n<li>js 会将变量的声明提升到 js 顶部执行，对于 var a = 2 这种语句，会拆分开，var a 和 a = 2 分开执行。 – 前半句是有歧义的，JS 是解释型语言，不会去改变你的代码顺序。</li>\n<li>当词法分析发现已经被定义的变量时，将不会执行 “初始化”(var c = undefined)</li>\n</ol>\n</blockquote>\n<h2 id=\"函数的类型\"><a class=\"markdownIt-Anchor\" href=\"#函数的类型\">#</a> 函数的类型</h2>\n<h4 id=\"声明函数\"><a class=\"markdownIt-Anchor\" href=\"#声明函数\">#</a> 声明函数</h4>\n<p><strong>使用 function 定义的函数，JS 世界的一等公民，提前使用不会报错，存在函数提升。</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"变量函数函数表达式\"><a class=\"markdownIt-Anchor\" href=\"#变量函数函数表达式\">#</a> 变量函数（函数表达式）</h4>\n<p><strong>使用变量关键字 (var/const/let) + function 定义的函数。</strong><br>\n<strong>JS 世界的被贬的一等公民，提前使用将会报错，存在变量提升。</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// JS 世界的被贬的一等公民，提前使用将会报错，存在变量提升</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 等价于</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> fn <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 故提前使用时， fn 为 undefined</span></pre></td></tr></table></figure><h4 id=\"匿名函数\"><a class=\"markdownIt-Anchor\" href=\"#匿名函数\">#</a> 匿名函数</h4>\n<p><strong>除了使用 function 定义没有名字的声明函数，变量函数和箭头函数也属于匿名函数</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 没有名字的函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 变量函数也属于匿名函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 箭头函数自然也是匿名函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fn2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"箭头函数\"><a class=\"markdownIt-Anchor\" href=\"#箭头函数\">#</a> 箭头函数</h4>\n<ul>\n<li>没有自己的 this，只能从父作用域中继承 this。</li>\n<li>在定义时就能确定 this 的指向，使用时不会改变 this 指向，call、apply、bind 都不会改变 this 的指向。</li>\n<li>没有 arguments 对象，即使在箭头函数中使用 arguments 也只是从父作用域中取得的 arguments 对象。</li>\n<li>箭头函数没有原型 prototype。</li>\n<li>箭头函数中没有 yield 关键字，不能作为 generator 函数使用。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// ES6 的快乐之一</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">arrowFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"构造函数\"><a class=\"markdownIt-Anchor\" href=\"#构造函数\">#</a> 构造函数</h4>\n<p><strong>声明函数和使用 function 函数表达式定义的函数都可以作为构造函数，但箭头函数不可以作为构造函数。</strong><br>\n<strong>鉴于开发习惯，通常把作为构造函数的名称定义时将首字母大写。</strong><br>\n<strong>可被 new 关键字使用。</strong></p>\n<blockquote>\n<p><strong>构造函数主要通过 this 的应用来实现实例化的结果，而箭头函数没有自己的 this，同时箭头函数也没有 prototype 属性，无法将该属性赋给实例对象的 <strong>proto</strong>。</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">B</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">D</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Uncaught TypeError: D is not a constructor</span></pre></td></tr></table></figure><h4 id=\"立即执行函数iife\"><a class=\"markdownIt-Anchor\" href=\"#立即执行函数iife\">#</a> 立即执行函数（IIFE）</h4>\n<p><strong>经常用于第三方库，用于模拟块级作用域，在一个函数表达式内部声明变量，然后立即调用这个函数，这样位于函数体作用域的变量就像是在块级作用域中一样。</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 一般写法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// OR</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//OR</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 如果函数结尾直接添加 () 执行，将会报错，因为不符合 js 的语法，想让其通过浏览器的语法检查，就必须添加符号，比如：()、+、! 等</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"测试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错 SyntaxError: Unexpected token ')'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"测试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正常执行</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"测试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正常执行</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token operator\">!</span><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"测试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 正常执行</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token operator\">~</span><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"测试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 正常执行</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"测试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 正常执行</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"测试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 正常执行</span></pre></td></tr></table></figure><h2 id=\"函数奇怪的作用域\"><a class=\"markdownIt-Anchor\" href=\"#函数奇怪的作用域\">#</a> 函数奇怪的作用域</h2>\n<p>函数在浏览器环境和 node 环境下的作用域有着些许的不同。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 非严格模式的浏览器环境下</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c <span class=\"token keyword\">in</span> window<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span> c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true undefined 'undefined'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c <span class=\"token keyword\">in</span> window<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span> c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false undefined 'function'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c <span class=\"token keyword\">in</span> window<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span> c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false ƒ c()&#123;&#125; 'function'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c <span class=\"token keyword\">in</span> window<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span> c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false ƒ c()&#123;&#125; 'function'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 在 node 环境或严格模式下</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c <span class=\"token keyword\">in</span> window<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span> c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Uncaught ReferenceError: c is not defined</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c <span class=\"token keyword\">in</span> window<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span> c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false undefined 'function'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c <span class=\"token keyword\">in</span> window<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span> c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false undefined 'function'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c <span class=\"token keyword\">in</span> window<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span> c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Uncaught ReferenceError: c is not defined</span></pre></td></tr></table></figure><p>这明确表明 JS 设计时是没有块级作用域的，JS 只有执行环境和作用域链。<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Zpc2lvbmtpbmcvc3hueWF3L2N4cXdhNw==\">JS 中的执行环境与作用域链</span></p>\n",
            "tags": [
                "JS 基础"
            ]
        },
        {
            "id": "https://v-immor.github.io/v-blog/posts/41a9f2c1.html",
            "url": "https://v-immor.github.io/v-blog/posts/41a9f2c1.html",
            "title": "JS 中的执行环境与作用域链",
            "date_published": "2022-04-20T21:22:00.000Z",
            "content_html": "<h2 id=\"执行环境的概念\"><a class=\"markdownIt-Anchor\" href=\"#执行环境的概念\">#</a> 执行环境的概念</h2>\n<ul>\n<li><strong>执行环境定义了变量或函数有权访问的其他数据，决定了他们各自的行为。</strong></li>\n<li><strong>每一个执行环境都有一个与之关联的变量对象，环境中所有定义的变量和函数都保存在这个变量中。</strong>\n<ul>\n<li>这个变量我们无法通过代码访问到，但解释器可以使用到它。</li>\n<li>在全局执行环境中这个变量可以近似认为是 window/global，但仅限于不使用关键字、 var 和 function 定义的变量或函数。</li>\n</ul>\n</li>\n<li><strong>当执行环境中的所有代码都执行完毕后，环境会被销毁，保存在其中的所有变量和函数定义也会被销毁。</strong>\n<ul>\n<li>全局执行环境直到应用程序退出才会销毁 (关闭网页 / 浏览器)</li>\n</ul>\n</li>\n<li><strong>每一个函数都有自己的执行环境，当执行一个函数时，该函数的执行环境会被推入到一个环境栈中，在函数执行完毕后将该函数的执行环境弹出，并把控制权返还给之前的执行环境。</strong></li>\n</ul>\n<h2 id=\"作用域链的概念\"><a class=\"markdownIt-Anchor\" href=\"#作用域链的概念\">#</a> 作用域链的概念</h2>\n<blockquote>\n<p>JS 没有块级作用域，但不代表没有作用域。<br>\n当代码在一个执行环境中执行时，会创建变量对象的一个作用域链 (scope chain)。<br>\n作用域链的用途就是保证对执行环境有权访问的所有变量和函数的有序访问。</p>\n</blockquote>\n<ul>\n<li>作用域链的前端始终是当前执行环境的变量对象。如：window</li>\n<li>如果在一个函数执行环境中，则会将其活动对象作为变量对象，并且在初始时只有一个变量 arguments。</li>\n<li>作用域链中的下一个变量对象则是上一个执行环境的变量对象，以此类推知道全局执行环境的变量对象，全局执行环境的变量对象始终是作用域链的最后一个对象。</li>\n<li>标识符解析就是沿着作用域链一级一级搜索标识符的过程，且搜索过程始终从作用域链的前端开始逐级回溯。</li>\n</ul>\n<h2 id=\"执行环境与作用域链\"><a class=\"markdownIt-Anchor\" href=\"#执行环境与作用域链\">#</a> 执行环境与作用域链</h2>\n<ul>\n<li>内部环境可以通过作用域链访问到所有的外部执行环境，但是外部的执行环境不能够访问内部执行环境中的任何变量和函数。\n<ul>\n<li>可以理解为环境可以向上搜索，但不能向下搜索。</li>\n<li>当在作用域链中搜索到标识符后即会停止向上搜索，所以如果存在同名变量时，只会取到最近执行环境中的同名变量。</li>\n<li>由作用域链的搜索方式可以得知，局部变量访问速度要比全局变量要快一馁馁。当然，因为 JS 引擎在标识符搜索查询方面做的很好，所以这点速度一般可以忽略不记。</li>\n</ul>\n</li>\n<li>使用 var 关键字声明的变量会自动添加到最近的执行环境中，如果没有使用 var 来声明变量则会自动添加到全局执行环境中。\n<ul>\n<li>如果先使用后声明变量，则可能会导致意外的结果。所以在严格模式下，初始化未声明的变量将会报错。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 浏览器环境下</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 使用 var 声明，自动添加到全局执行环境的变量对象 window 上</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 没有使用 var 声明，则自动添加到 window 下，A 函数执行完不会被销毁</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  b <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 使用 var 声明，自动添加到 A 的执行环境的变量对象上。A 函数执行完即会销毁</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 从 A 函数执行环境的变量对象中搜索，没有找到，接着向上搜索到全局执行环境中 a </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>window<span class=\"token punctuation\">.</span>c <span class=\"token comment\">// undefined</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 不能够向下搜索找到 A 中的 c</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>c <span class=\"token comment\">// r is not defined</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>window<span class=\"token punctuation\">.</span>a <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>window<span class=\"token punctuation\">.</span>b <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>window<span class=\"token punctuation\">.</span>c <span class=\"token comment\">// undefined</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// A 函数执行完立即销毁执行环境及其内所有的变量与函数。</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>c <span class=\"token comment\">// r is not defined</span></pre></td></tr></table></figure><h2 id=\"js-为什么没有块级作用域\"><a class=\"markdownIt-Anchor\" href=\"#js-为什么没有块级作用域\">#</a> JS 为什么没有块级作用域？</h2>\n<blockquote>\n<p>这是 JS 设计时的因素，因为 JS 的代码块不会像其他语言一样形成自己的作用域，只会依托于最近的执行环境的变量对象。<br>\n可以简单的把函数执行环境作为块级作用域的表现。<br>\n在 ES6 之后，通过 let/const 声明的变量将具有块级作用域的表现。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 在代码块外部也能访问变量 a</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// 在函数执行环境中也是一样的，代码块外部也能访问变量 b</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 因为 b 在 A 函数的执行环境中，所以无法在全局环境中访问，并且 A 函数执行完后也会进行销毁</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">//Uncaught ReferenceError: b is not defined</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">// 如果有异步执行，则由 JS 的执行机制导致 i 将是变量后的 i</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">// async fn(i) ==> fn(10)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span></pre></td></tr></table></figure><ul>\n<li>try-catch 中的 catch 语句以及 with 语句有延长作用域的现象。</li>\n</ul>\n<h2 id=\"es6-后的有趣现象\"><a class=\"markdownIt-Anchor\" href=\"#es6-后的有趣现象\">#</a> ES6 后的有趣现象</h2>\n<blockquote>\n<p>关于 const、let、var、暂时性死区等 ES6 相关内容 – <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Zpc2lvbmtpbmcvc3hueWF3L2Vja3p0YQ==\">ES6 后的 JS 世界</span></p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 使用 const/let 声明的变量不会添加到 window 中</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">//var 声明的全局变量会自动添加到 window 对象中</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token comment\">// Uncaught TypeError: Assignment to constant variable.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//const/let 锁定的是栈内存中的值，而不是堆中的值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> a<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token comment\">// a = &#123; b: 2 &#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "JS 基础"
            ]
        },
        {
            "id": "https://v-immor.github.io/v-blog/posts/4c3fd2b0.html",
            "url": "https://v-immor.github.io/v-blog/posts/4c3fd2b0.html",
            "title": "JS 中的数据类型",
            "date_published": "2022-04-20T18:15:00.000Z",
            "content_html": "<h2 id=\"基本数据类型\"><a class=\"markdownIt-Anchor\" href=\"#基本数据类型\">#</a> 基本数据类型</h2>\n<ul>\n<li>string</li>\n<li>number</li>\n<li>boolean</li>\n<li>undefined</li>\n<li>null</li>\n</ul>\n<blockquote>\n<p><strong>除了 undefined 和 null 没有原型，其余基本类型的原型都是其包装引用类型 (String、Number、Boolean)</strong><br>\n<strong> NaN 也属于 number，同时 NaN 进行任何数学运算结果都是 NaN</strong></p>\n</blockquote>\n<h2 id=\"es6-后增加的基本数据类型\"><a class=\"markdownIt-Anchor\" href=\"#es6-后增加的基本数据类型\">#</a> ES6 后增加的基本数据类型</h2>\n<ul>\n<li>BigInt</li>\n<li>Symbol</li>\n</ul>\n<h2 id=\"引用类型\"><a class=\"markdownIt-Anchor\" href=\"#引用类型\">#</a> 引用类型</h2>\n<blockquote>\n<p>除基本数据类型外都是引用类型。</p>\n</blockquote>\n<ul>\n<li>Object</li>\n<li>Array</li>\n<li>Function</li>\n<li>Date</li>\n<li>RegExp</li>\n</ul>\n<h2 id=\"基本数据类型和引用数据类型的比较\"><a class=\"markdownIt-Anchor\" href=\"#基本数据类型和引用数据类型的比较\">#</a> 基本数据类型和引用数据类型的比较</h2>\n<ul>\n<li>基本数据类型在内存中占有固定的大小，会保存在栈内存中。</li>\n<li>引用数据类型的大小不确定的，同时为了明确引用数据类型的使用，所以会将值保存在堆内存中，同时将其指针保存在栈内存中。使用时一般通过指针来查找到堆内存中的值。</li>\n</ul>\n<p>由上两点可以知道，基本数据类型都是直接操作值的，引用数据类型只能通过栈内存中的指针来访问值，而 JS 是在执行栈中运行的，所以基本数据类型复制的是值，引用数据类型复制的是指针。指针一样则指向的堆内存地址一致。</p>\n<h2 id=\"数据类型的检测\"><a class=\"markdownIt-Anchor\" href=\"#数据类型的检测\">#</a> 数据类型的检测</h2>\n<p>通过 typeof 即可检测基本数据类型。由于 null 的历史遗留问题 (前三位为 000)，所以 typeof null === ‘object’ 。typeof 无法检测除 function 外的引用类型，其余的引用类型检测结果都是 object。<br>\n通过 Object.prototype.toString.call 可以检测基本数据类型和引用数据类型，在 Object.prototype.toString 方法没有被覆写下可返回 ‘[object Type]’，取 Type 即是当前数据类型。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> _toString <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">toRawType</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 获取 从第九个到倒数第二个 字符</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 比如 [object String]  获取 String</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">_toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"typeof-和-instanceof\"><a class=\"markdownIt-Anchor\" href=\"#typeof-和-instanceof\">#</a> typeof 和 instanceof</h4>\n<h5 id=\"typeof\"><a class=\"markdownIt-Anchor\" href=\"#typeof\">#</a> typeof</h5>\n<ul>\n<li>typeof 检测的是类型在内存中二进制低位的表现。 javascript 的最初版本中，使用的 32 位系统，为了性能考虑使用低位存储了变量的类型信息：\n<ul>\n<li>000：对象</li>\n<li>010：浮点数</li>\n<li>100：字符串</li>\n<li>110：布尔</li>\n<li>111：整数</li>\n</ul>\n</li>\n<li>但是对于 undefined 和 null 来说，这两个值的信息存储是有点特殊的。null 对应机器码的 NULL 指针，一般是全 0（所以低位也是 000 ）。undefined：用 −2^30 整数来表示。所以，typeof 在判断 null 的时候就出现问题了，由于 null 的所有机器码均为 0，因此直接被当做了对象来看待。</li>\n</ul>\n<h5 id=\"instanceof\"><a class=\"markdownIt-Anchor\" href=\"#instanceof\">#</a> instanceof</h5>\n<ul>\n<li>instanceof 运算符用于检测构造函数的 prototype 是否出现在某个实例对象的原型链上。</li>\n<li>variable instanceof constructor</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义构造函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token constant\">D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true，因为 Object.getPrototypeOf (o) === C.prototype</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">D</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false，因为 D.prototype 不在 o 的原型链上</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true，因为 Object.prototype.isPrototypeOf (o) 返回 true</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">C</span><span class=\"token punctuation\">.</span>prototype <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span> <span class=\"token comment\">//true，同上</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">C</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">var</span> o2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>o2 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false，C.prototype 指向了一个空对象，这个空对象不在 o 的原型链上.</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token class-name\">D</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 继承</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">var</span> o3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>o3 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">D</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>o3 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true 因为 C.prototype 现在在 o3 的原型链上</span></pre></td></tr></table></figure><h2 id=\"数据类型的转换\"><a class=\"markdownIt-Anchor\" href=\"#数据类型的转换\">#</a> 数据类型的转换</h2>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2VzNS5naXRodWIuaW8vI3g5\">http://es5.github.io/#x9</span></p>\n</blockquote>\n<h4 id=\"显式转换\"><a class=\"markdownIt-Anchor\" href=\"#显式转换\">#</a> 显式转换</h4>\n<p>显式转换就是通过 “一些方法” 主动去进行类型转换。<br>\n一些方法：</p>\n<ul>\n<li>Boolean()</li>\n</ul>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.nlark.com/yuque/0/2022/png/412560/1650382009436-f999cc2a-03be-41fc-8895-5c00d4fdea37.png#clientId=u067bca08-7c24-4&amp;from=paste&amp;height=329&amp;id=u54f7deb9&amp;name=image.png&amp;originHeight=658&amp;originWidth=1558&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=96000&amp;status=done&amp;style=none&amp;taskId=ue914dee8-e709-41d6-8469-2e49f32a58d&amp;title=&amp;width=779\" alt=\"image.png\"></p>\n<ul>\n<li>Number()</li>\n</ul>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.nlark.com/yuque/0/2022/png/412560/1650382029025-2d63da15-6eff-4bcd-ae91-bb04fe15df81.png#clientId=u067bca08-7c24-4&amp;from=paste&amp;height=412&amp;id=u6ed163aa&amp;name=image.png&amp;originHeight=824&amp;originWidth=1446&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=106534&amp;status=done&amp;style=none&amp;taskId=u2d7a27ca-344d-40fc-b76e-03b338c479c&amp;title=&amp;width=723\" alt=\"image.png\"></p>\n<ul>\n<li>String()</li>\n</ul>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.nlark.com/yuque/0/2022/png/412560/1650382047559-8951b295-6118-4156-ab78-528de56eaf20.png#clientId=u067bca08-7c24-4&amp;from=paste&amp;height=352&amp;id=u7de25f84&amp;name=image.png&amp;originHeight=704&amp;originWidth=1428&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=102731&amp;status=done&amp;style=none&amp;taskId=uad9d8e53-fdba-428b-982c-bfe25dc8d40&amp;title=&amp;width=714\" alt=\"image.png\"></p>\n<ul>\n<li>toString()\n<ul>\n<li>一个表示该对象的字符串</li>\n<li>null 和 undefined 没有 toString，也不能进行转换，String () 可以转换 null 和 undefined</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [object Object]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1,2,3</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// function ()&#123;var a = 1;&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\d+</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// /\\d+/g</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2010</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Fri Jan 01 2010 00:00:00 GMT+0800 (CST)</span></pre></td></tr></table></figure><ul>\n<li>valueOf()\n<ul>\n<li>返回值为对象的原始值</li>\n<li>日期是一个例外，它会返回它的一个内容表示: 1970 年 1 月 1 日以来的毫秒数。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// &#123;&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//  []</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [0]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1,2,3]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// function ()&#123;var a = 1;&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\d+</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//  /\\d+/g</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2022</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1652889600000</span></pre></td></tr></table></figure><ul>\n<li>toPrimitive(val, PreferredType)</li>\n</ul>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 第一个参数是 val，表示要处理的值。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>* 第二个参数是 PreferredType，非必填，表示希望转换成的类型，有两个值可以选，Number 或者 String。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>* 当不传入 PreferredType 时，如果 input 是日期类型，相当于传入 String，否则，都相当于传入 Number。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>* 如果传入的 input 是 Undefined、Null、Boolean、Number、String 类型，直接返回该值。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>*</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>* 如果是 ToPrimitive (obj, Number)，处理步骤如下：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>* 如果 obj 为 基本类型，直接返回</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>* 否则，调用 valueOf 方法，如果返回一个原始值，则 JavaScript 将其返回。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>* 否则，调用 toString 方法，如果返回一个原始值，则 JavaScript 将其返回。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>* 否则，JavaScript 抛出一个类型错误异常。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>*</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>* 如果是 ToPrimitive (obj, String)，处理步骤如下：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>* 如果 obj 为 基本类型，直接返回</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>* 否则，调用 toString 方法，如果返回一个原始值，则 JavaScript 将其返回。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>* 否则，调用 valueOf 方法，如果返回一个原始值，则 JavaScript 将其返回。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>* 否则，JavaScript 抛出一个类型错误异常。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"隐式转换\"><a class=\"markdownIt-Anchor\" href=\"#隐式转换\">#</a> 隐式转换</h4>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21xeXFpbmdmZW5nL0Jsb2cvaXNzdWVzLzE2NA==\">https://github.com/mqyqingfeng/Blog/issues/164</span></p>\n</blockquote>\n<p><strong>触发隐式转换的条件：</strong></p>\n<ul>\n<li><strong>二元运算符 (+、-、*、)</strong></li>\n<li><strong>三元运算符 (?😃</strong></li>\n<li><strong>关系运算符 (&gt;、&lt;、&gt;=、&lt;=)</strong></li>\n<li><strong>逻辑运算符 (!、&amp;&amp;、||)</strong></li>\n<li><strong>if、else if</strong></li>\n<li><strong>==</strong></li>\n</ul>\n<p><strong>隐式转换的规则一般都按照 toNumber、toString、 toPrimitive 的规则进行转换。</strong><br>\n<strong>{}、+ 在不同的写法下有着不同的表现。</strong></p>\n<ul>\n<li><strong>{} 在开头会作为代码块的标识。</strong></li>\n<li><strong>+ 在字符串的运算中作为字符连接符使用、而在数值计算时作为二元运算符的加号使用。</strong></li>\n</ul>\n<p><strong>undefined、null 在进行转换时也有不同的表现。</strong><br>\n<strong>二元运算符的操作数只能是数值，如果不是数值，则会进行隐式转换为数值。</strong><br>\n<strong>逻辑运算符的操作数只能是布尔值，如果不是布尔值，则会进行隐式转换为布尔值。</strong></p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 如果 &#123;&#125; 是在开头，JS 解释器会将其作为一个代码块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Uncaught SyntaxError: Unexpected token '.'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 只要 &#123;&#125; 不在开头就行</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// &#123;&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span>valueOf<span class=\"token punctuation\">)</span> <span class=\"token comment\">// &#123;&#125;</span></pre></td></tr></table></figure><h5 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> +:</h5>\n<ul>\n<li>如果两个操作数都是数值，则作为二元运算符的加号使用。</li>\n<li>若一个操作数是数值，另一个操作数为 undefined 或 null，会把 undefined 和 null 用 Number 进行转换，然后作为二元运算符的加号使用。</li>\n<li>若有一个操作数为字符串时，会将另一个操作数转换成字符串，作为字符连接符使用。</li>\n<li>若有一个操作数为 object 时，会将这个操作数调用 toString () 进行转换，然后作为字符连接符使用。</li>\n<li>若一个操作数为字符串，另一个操作数为 undefined 或 null 时，会将这个操作数用 String () 进行转换，然后作为字符连接符使用。</li>\n</ul>\n<h5 id=\"-2\"><a class=\"markdownIt-Anchor\" href=\"#-2\">#</a> ==:</h5>\n<ul>\n<li>字符串和数字之间的相等比较，将字符串转换为数字之后再进行比较。</li>\n<li>其他类型和布尔类型之间的相等比较，先将布尔值转换为数字后，再应用其他规则进行比较。</li>\n<li>null 和 undefined 之间的相等比较，结果为真。其他值和它们进行比较都返回假值。</li>\n<li>对象和非对象之间的相等比较，对象先调用 ToPrimitive 抽象操作后，再进行比较。</li>\n<li>如果一个操作值为 NaN ，则相等比较返回 false（ NaN 本身也不等于 NaN ）。</li>\n<li>如果两个操作值都是对象，则比较它们栈中的引用是否相等。如果引用相等，则相等操作符返回 true，否则返回 false。</li>\n</ul>\n<h5 id=\"ifelse-if\"><a class=\"markdownIt-Anchor\" href=\"#ifelse-if\">#</a> if/else if:</h5>\n<ul>\n<li>if (x)/else if (x) 使用 Boolean (x) 进行转换。</li>\n</ul>\n<h4 id=\"关系运算符\"><a class=\"markdownIt-Anchor\" href=\"#关系运算符\">#</a> 关系运算符 (&gt;、&lt;、&gt;=、&lt;=):</h4>\n<ul>\n<li>如果两个操作值都是数值，则进行数值比较。</li>\n<li>如果两个操作值都是字符串，则比较字符串对应的字符编码值。</li>\n<li>如果只有一个操作值是数值，则将另一个操作值转换为数值，进行数值比较。</li>\n<li>如果一个操作数是对象，则调用 valueOf（如果对象没有 valueOf 则调用 toString），得到的结果按照前面的规则执行比较。</li>\n<li>如果一个操作值是布尔值，则将其转换为数值，再进行比较。</li>\n</ul>\n<blockquote>\n<p>注：NaN 是非常特殊的值，它不和任何类型的值相等，包括它自己，同时它与任何类型的值比较大小时都返回 false。</p>\n</blockquote>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">NaN</span> <span class=\"token operator\">==</span> <span class=\"token number\">NaN</span>  <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">NaN</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span> <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">NaN</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">NaN</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">NaN</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">NaN</span> <span class=\"token operator\">==</span> <span class=\"token string\">''</span>  <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">NaN</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token boolean\">false</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span>  <span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token boolean\">false</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span>  <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token boolean\">false</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span>  <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token boolean\">false</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token boolean\">false</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token boolean\">false</span> <span class=\"token operator\">==</span> <span class=\"token string\">''</span>  <span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">undefined</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span> <span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">undefined</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span>  <span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">undefined</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">undefined</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">undefined</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">undefined</span> <span class=\"token operator\">==</span> <span class=\"token string\">''</span> <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span>   <span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> <span class=\"token number\">NaN</span>  <span class=\"token comment\">//false  </span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span>  <span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span>    <span class=\"token comment\">//true   </span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span>  <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span> <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token string\">''</span> <span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token number\">NaN</span> <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token boolean\">false</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token boolean\">false</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token boolean\">false</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span>  <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token boolean\">false</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span>  <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token boolean\">false</span> <span class=\"token operator\">==</span> <span class=\"token string\">''</span>  <span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token boolean\">false</span> <span class=\"token operator\">==</span> <span class=\"token number\">NaN</span>  <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">//false</span></pre></td></tr></table></figure><h2 id=\"有趣的比较\"><a class=\"markdownIt-Anchor\" href=\"#有趣的比较\">#</a> 有趣的比较</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//true 看这里！</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">==</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false  </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>* 原理：其他类型和布尔类型之间的相等比较，先将布尔值转换为数字后，再应用其他规则进行比较。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>* 1.[].valueOf ().toString () 得到字符串 \"\"</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>* 2. 将 \"\"转为数字 Number (\"\") 得到数字 0</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>* 所以 [] == 0 成立</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true </span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>* 其他类型和布尔类型之间的相等比较，先将布尔值转换为数字后，再应用其他规则进行比较。</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>* 与上面类似，只是逻辑运算符优先级高于关系运算符，所以先执行！[] 得到 false</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>* false == 0 等价于 0 == 0</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// true  </span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/* </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>* 其他类型和布尔类型之间的相等比较，先将布尔值转换为数字后，再应用其他规则进行比较。</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>* ![] 优先级高 先转换成 boolean 等价于 false</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>* [] == false 等价于 Number (([]).valueOf ().toString ()) == 0 即 0 == 0</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>* 引用数据类型数据存在堆中，栈中存储的是它们的地址，两个 [] 地址肯定不一样，所以是 false</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">==</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>* 其他类型和布尔类型之间的相等比较，先将布尔值转换为数字后，再应用其他规则进行比较。</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>* !&#123;&#125; 优先级高 先转换成 boolean 等价于 false</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>* &#123;&#125; == false 等价于 Number (([]).valueOf ().toString ()) == 0 即 NaN == 0</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>* 引用数据类型数据存在堆中，栈中存储的是它们的地址，所以肯定不一样</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>*/</span></pre></td></tr></table></figure>",
            "tags": [
                "JS 基础"
            ]
        }
    ]
}